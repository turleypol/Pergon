/////////////////////////////////////////////////////////
//
//   quest_mage - OverrideFunction KI Hauptkram in main.inc
//                Main_AI3
//
//
//     Author: Turley
//
//
//   Modifications:
//     06.05.08 Turley: Init
//
/////////////////////////////////////////////////////////

// Quest Mage: Spezielle QuestKI fieser mageattack der versteckte
//  Feinde erkennt und entsprechend castet

include ":main_ai3:include_common/main_ai";
CONST NATURE:=NATURE_QUEST_MAGE;
include ":main_ai3:include_common/main";
include ":main_ai3:include_common/common";
include ":main_ai3:include_nature/quest";

include ":questsystem:questsystem";

Var questcfg:=ReadConfigFile(":questsystem:quests"); //Config für Quests
var questnpccfg:=ReadConfigFile(":questsystem:questnpc");//Config für den QuestNPC


Var Antimagie:=1;
Var delay_againsthidden:=ReadGameClock();

Function OnStart()
  OnStartQuesti();
EndFunction

Function InitNPC()
  If (me.name["<random>"])
    if (Me.getprop("questnpc"))
      var index:=Me.getprop("questnpc");
      var npceintrag:=questnpccfg[index];
      if (npceintrag.name)
        SetName(me, npceintrag.name + PreserveTitle(me));
      else
        SetName(me, RandomName(me));
      endif
    else
      SetName(me, RandomName(me));
    endif
  EndIf
  Habille(me, GetObjProperty(me, "Equipt")); //austatten nach "Equipt"
  EquipMe(); //ausstatten nach configeintraegen
EndFunction

Function InitParamsSpezial(byref mytemplate)
  EnableEvents(SYSEVENT_LEFTAREA, params[RANGESENSE]);
  EnableEvents(SYSEVENT_SPEECH, params[RANGESENSE]);
  Return;
  mytemplate:=mytemplate;
EndFunction

Function Before_Events()
  Return;
EndFunction

Function IdleTime()
  Return(IdleTime_Common());
EndFunction

Function Event_DoubleClicked(byref ev)
  Event_DoubleClicked_Common(ev);
EndFunction

Function Event_ItemGiven(byref ev)
  Event_ItemGiven_Common(ev);
EndFunction

Function Event_Speech(byref ev)
  if ((GetObjProperty(Me,"questnpc"))&&(lower(" "+ev.text+" ")[" auftrag "]))
    if (!GetObjProperty(Me,PROP_MASTER))
      var parms:={};
      parms[1]:=Me;
      parms[2]:=ev.source;
      Start_ScriptPergon(":questsystem:questsystem",parms);
      Return;
    endif
  else
    If (!RandomInt(3)) // nicht immer reden
      PrintTextAbovePergon(ev.source,me,
      Answering({"seid_gegruesst","hallo"}[RandomIntMinMax(1,3)],
      PlaceName(me), me
      ));
    EndIf
  endif
EndFunction

Function Can_Speech_Kill()
  Return(0);
EndFunction

Function Can_Speech_Guard()
  Return(0);
EndFunction

Function Event_Engaged(byref ev)
  If (Event_Engaged_Common(ev))
    if ( !Me.warmode )
      if (params[FIRSTCAST])
        If (!MagicFight(ev.source))
          MakeMePeaceful(params[RANGESENSE]);
        EndIf
      endif
      if ((ev.source.hidden)||(ev.source.enabled("invul"))||(!CheckLineOfSight(me,ev.source)))
        if (delay_Againsthidden < ReadGameClock())
          delay_Againsthidden := AgainstHidden() + ReadGameClock();
        endif
      else
        FightQuesti( ev.source, params[RANGESENSE]);
      endif
    endif
  EndIf
EndFunction

Function Event_Disengaged(byref ev)
  Event_Disengaged_Common(ev);
EndFunction

Function Event_Damaged(byref ev)
  If (Event_Damaged_Common(ev))
    //Was ist wenn ich schaden bekomme und niemanden sehe(versteckt)
    //(Invul Player als versteckte behandel
    if ((ev.source.hidden)||(ev.source.enabled("invul"))||(!CheckLineOfSight(me,ev.source)))
      if (delay_againsthidden < ReadGameClock())
        delay_againsthidden:=AgainstHidden()+ReadGameClock();
      endif
    endif
    if (params[FIRSTCAST])
      If (!MagicFight(ev.source))
        MakeMePeaceful(params[RANGESENSE]);
      EndIf
    endif
    if (!Me.warmode)
      FightQuesti( ev.source, params[RANGESENSE]);
    else
      SetWarmode(0); //neuen gegner setzen ermoeglichen
      FightQuesti( ev.source, params[RANGESENSE]);
    endif
  EndIf
EndFunction

Function Event_EnteredArea(byref ev)
  If (!ev.source.isa(POLCLASS_NPC))
    wandersteps:=params[IDLESTEPS];//wenn ein Player in Sicht kommt ein bissel rumlatschen
  EndIf
EndFunction

Function Event_LeftArea(byref ev)
  antimagie:=1;
  Return;
  ev:=ev;
EndFunction

Function Event_StillRun(byref ev)
  Return;
  ev:=ev;
EndFunction

Function Event_LookAround(byref ev)
  Return;
  ev:=ev;
EndFunction

Function Event_Follow(byref ev)
  Return;
  ev:=ev;
EndFunction

Function Event_AskJoin(byref ev)
  Return;
  ev:=ev;
  //Event_AskJoin_Common(ev);
EndFunction

Function Event_GrantJoin(byref ev)
  Return;
  ev:=ev;
  //Event_GrantJoin_Common(ev);
EndFunction

Function Event_RefuseJoin(byref ev)
  Return;
  ev:=ev;
  //Event_RefuseJoin_Common(ev);
EndFunction

Function Event_Walk(byref ev)
  Event_Walk_Common(ev);
EndFunction

Function Event_Peacemade(byref ev)
  Event_Peacemade_Common(ev);
  MakeMePeaceful(params[RANGESENSE]);
EndFunction

Function Event_Guards_Help(byref ev)
  Event_Guards_Help_Common(ev);
EndFunction

Function Event_Cast_Wait(byref ev)
  If (!Me.warmode)  // Kämpf ich noch?
    params[FIRSTCAST]:=1;
    Return;
  EndIf
  If (Me.getprop(PROP_OPPONENT))  // Hinkt wegen Lookaround immer hinterher
    ev.source:=SystemFindObjectBySerial(Me.getprop(PROP_OPPONENT));
    If (!ev.source)                     // deswegen opp aus cprop holen
      params[FIRSTCAST]:=1;
      Return;
    EndIf
    If (!Event_Cast_Wait_Common(ev))
      MakeMePeaceful(params[RANGESENSE]);
    EndIf
  Else
    params[FIRSTCAST]:=1;
  EndIf
EndFunction

Function Event_Quest_Waypoint(byref ev)
  Return;
  ev:=ev;
EndFunction

Function Event_Quest_Speech(byref ev)
  Return;
  ev:=ev;
EndFunction

Function Event_Self_Kill(byref ev)
  Return;
  ev:=ev;
EndFunction

Function Event_Quest_Nemesis(byref ev)
  Return;
  ev:=ev;
EndFunction

Function Event_Reflection(byref ev)
  CastReflection();
  Return;
  ev := ev;
EndFunction

Function OnIdle()
  OnIdleQuesti();
EndFunction

Function ValidEnemy_Override(byref mob,byref hostile)
  Return(ValidEnemy_Override_Common(mob));
  hostile:=hostile;
EndFunction