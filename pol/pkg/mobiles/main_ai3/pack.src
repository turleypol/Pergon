/////////////////////////////////////////////////////////
//
//   pack - OverrideFunction KI Hauptkram in main.inc
//          Main_AI3
//
//
//     Author: Turley
//
//
//   Modifications:
//     06.05.08 Turley: Init
//
/////////////////////////////////////////////////////////
//
// Pack - Bewegt/kämpft in einer Gruppe (Nahkampf)

include ":main_ai3:include_common/main_ai";
CONST NATURE:=NATURE_PACK;
include ":main_ai3:include_common/main";
include ":main_ai3:include_common/common";
include ":main_ai3:include_nature/pack";
include ":main_ai3:include_nature/group";
include ":main_ai3:include_nature/killernear";

include ":main_ai3:include_common/tame";  // Bis Gruppenverhalten für alle Machbar ist
include ":main_ai3:include_nature/group"; // Nur hier includen



Function OnStart()
  OnStartGroup();
EndFunction

Function InitNPC()
  InitNPC_Common();
EndFunction

Function InitParamsSpezial(byref mytemplate)
  params.insert(RANGESENSELEADER,(params[RANGESENSE] + RANGE_LEADER)); //das leittier schaut weiter voraus
  params.insert(RANGESENSEORIG,params[RANGESENSE]);
  params.insert(GROUP,mytemplate.group);
  If(!params[GROUP])
    params[GROUP] := 0;
    LogToFile("::log/ailog.log", "WARNUNG: " + Me.name + " hat keinen group eintrag!");
  EndIf
  params.insert(GROUPSIZE,mytemplate.groupsize);
  If(!params[GROUPSIZE])
    params[GROUPSIZE] := DEFHERDSIZE;
    LogToFile("::log/ailog.log", "WARNUNG: " + Me.name + " hat keinen groupsize eintrag!");
  EndIf
  params.insert(GROUPDIST,mytemplate.groupdist);
  If(!params[GROUPDIST])
    params[GROUPDIST] := DEFGROUPDIST;
    LogToFile("::log/ailog.log", "WARNUNG: " + Me.name + " hat keinen groupdist eintrag!");
  EndIf
EndFunction

Function Before_Events()
  Return;
EndFunction

Function IdleTime()
  Return(IdleTime_Common());
EndFunction

Function Event_DoubleClicked(byref ev)
  Event_DoubleClicked_Common(ev);
EndFunction

Function Event_ItemGiven(byref ev)
  Event_ItemGiven_Common(ev);
EndFunction

Function Event_Speech(byref ev)
  Event_Speech_Common(ev);
EndFunction

Function Can_Speech_Kill()
  Return(1);
EndFunction

Function Can_Speech_Guard()
  Return(1);
EndFunction

Function Event_Engaged(byref ev)
  If (Event_Engaged_Common(ev))
    If(ev.leader) //der leader hat gesagt, dass ich angreifen soll
      SetWarMode(0); //warmode kurz verlassen um Setzen eines neuen Gegners zu ermöglichen
      If (params.exists(SPELLCASTER))
        If (params[FIRSTCAST])  // Hab noch nicht gecastet also jetzt mal anschmeißen
          MagicFight(ev.source);
        EndIf
      EndIf
      FightKillerNear( ev.source );
    Else
      If( !Me.warmode ) //nur wenn er nicht schon kaempft
        If (params.exists(SPELLCASTER))
          If (params[FIRSTCAST])  // Hab noch nicht gecastet also jetzt mal anschmeißen
            MagicFight(ev.source);
          EndIf
        EndIf
        FightPack( ev.source );
      EndIf
    EndIf
  EndIf
EndFunction

Function Event_Disengaged(byref ev)
  Event_Disengaged_Common(ev);
EndFunction

Function Event_Damaged(byref ev)
  If (Event_Damaged_Common(ev))
    If( !Me.warmode ) //nur wenn er nicht schon kaempft
      //PrintTextAbovePergon(ev.source, Me, "angreifen " + ev.source.name);
      If (params.exists(SPELLCASTER))
        If (params[FIRSTCAST])  // Hab noch nicht gecastet also jetzt mal anschmeißen
          MagicFight(ev.source);
        EndIf
      EndIf
      FightKillerNear( ev.source );
    Else
      If( !RandomInt(50) ) //2%chance vielleicht renn ich ja trotzdem hin?
        //PrintTextAbovePergon(ev.source, Me, "neu angreifen " + ev.source.name);
        SetwarMode(0); //warmode kurz verlassen um Setzen eines neuen Gegners zu ermöglichen
        If (params.exists(SPELLCASTER))
          If (params[FIRSTCAST])  // Hab noch nicht gecastet also jetzt mal anschmeißen
            MagicFight(ev.source);
          EndIf
        EndIf
        FightKillerNear( ev.source );
      EndIf
    EndIf
  EndIf
EndFunction

Function Event_EnteredArea(byref ev)
  If (Event_EnteredArea_Common(ev))
    If( !Me.warmode ) //nur wenn er nicht schon kaempft
      If (ValidEnemy_Override(ev.source,1))
        If (params.exists(SPELLCASTER))
          If (params[FIRSTCAST])  // Hab noch nicht gecastet also jetzt mal anschmeißen
            MagicFight(ev.source);
          EndIf
        EndIf
        FightPack( ev.source );
      EndIf
    EndIf
  EndIf
EndFunction

Function Event_LeftArea(byref ev)
  Event_LeftArea_Common(ev);
EndFunction

Function Event_StillRun(byref ev)
  Return;
  ev:=ev;
EndFunction

Function Event_LookAround(byref ev)
  ev.source:=Event_LookAround_Common(ev);
  If (ev.source==-1)
    MakeMePeaceful(params[RANGESENSE]);
  ElseIf (ev.source)
    If (params.exists(SPELLCASTER))
      If (params[FIRSTCAST])  // Hab noch nicht gecastet also jetzt mal anschmeißen
        MagicFight(ev.source);
      EndIf
    EndIf
    FightPack( ev.source );
  EndIf
EndFunction

Function Event_Follow(byref ev)
  Event_Follow_Common(ev);
EndFunction

Function Event_AskJoin(byref ev)
  Event_AskJoin_Common(ev);
EndFunction

Function Event_GrantJoin(byref ev)
  Event_GrantJoin_Common(ev);
EndFunction

Function Event_RefuseJoin(byref ev)
  Event_RefuseJoin_Common(ev);
EndFunction

Function Event_Walk(byref ev)
  Event_Walk_Common(ev);
EndFunction

Function Event_Peacemade(byref ev)
  Event_Peacemade_Common(ev);
  MakeMePeaceful(params[RANGESENSE]);
EndFunction

Function Event_Guards_Help(byref ev)
  Event_Guards_Help_Common(ev);
EndFunction

Function Event_Cast_Wait(byref ev)
  If (!Me.warmode)  // Kämpf ich noch?
    params[FIRSTCAST]:=1;
    Return;
  EndIf
  If (Me.getprop(PROP_OPPONENT))  // Hinkt wegen Lookaround immer hinterher
    ev.source:=SystemFindObjectBySerial(Me.getprop(PROP_OPPONENT));
    If (!ev.source)                     // deswegen opp aus cprop holen
      params[FIRSTCAST]:=1;
      Return;
    EndIf
    Event_Cast_Wait_Common(ev);
  Else
    params[FIRSTCAST]:=1;
  EndIf
EndFunction

Function Event_Quest_Waypoint(byref ev)
  Return;
  ev:=ev;
EndFunction

Function Event_Quest_Speech(byref ev)
  Return;
  ev:=ev;
EndFunction

Function Event_Self_Kill(byref ev)
  Return;
  ev:=ev;
EndFunction

Function Event_Quest_Nemesis(byref ev)
  Return;
  ev:=ev;
EndFunction

Function Event_Reflection(byref ev)
	Event_Reflection_Common(ev);
EndFunction

Function OnIdle()
  OnIdlePack();
EndFunction


Function ValidEnemy_Override(byref mob,byref hostile)
  Return(ValidEnemy_Override_Common(mob));
  hostile:=hostile;
EndFunction