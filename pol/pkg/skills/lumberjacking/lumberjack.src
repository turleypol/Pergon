//////////////////////////////////////////////////////////////////////
//  based on the original standard package script, im not sure who
//  wrote it or i would include the name in the credits.

use attributes;
use cfgfile;
use os;
use uo;
use util;
include "include/modifyskill";
include "include/objtype";
include "include/resources";
include "include/set";

Const UACTION_CHOP := ANIM_ATTACK_2HAND_WIDE;

var GeschlagenesHolz;
Program UseAxe(me, axe) // {{{
  If (
    // Wenn ein Nicht-Newbie auf Jhe'lom oder ...
    (me.getprop(PLACE_INNEWBIEAREA) and !me.getprop(TYPNEWBIE)) or
    // ... jemand auf der Goetterinsel Holz hacken will ...
    (me.getprop(PLACE_ATGODPALACE))
  )
    // ... dann wird gecheckt, ob die Haende frei sind
    // (derjenige darf ja die Axt nicht in die Hand nehmen)
    If (
      (GetEquipmentByLayer(me, LAYER_HAND1)) ||
      (GetEquipmentByLayer(me, LAYER_HAND2))
    )
      SendSysMessagePergon(me,
        "Ihr braucht freie Hände, um das Werkzeug benutzen zu können!",
        "You need free hands to use this tool!"
      );
      return;
    EndIf
  Else  // Normal; Nicht-Jhelomregionen
    If (!IsAxEquipped (me, axe))
      SendSysMessagePergon(me,
        "Ihr müsst das Werkzeug in die Hand nehmen!",
        "You have to hold this tool in your hand!"
      );
      return;
    EndIf
  EndIf

  ReserveItem(axe);

  // ermittelt gleichzeitig Variable "Geschlagenes Holz"
  // bricht unter 20% unter req_Skill für das Holz ab.
  var tree := SelectTree(me);
  If (tree)
    var ReqAbbau := GetReqAbbau(GeschlagenesHolz);

    If (ReqAbbau - 20 <= GetSkillPergon(me, SKILLID_HOLZFAELLEN));
      SendSysMessagePergon(me,
        "Ihr beginnt mit dem Fällen von Holz ...",
        "You start chopping some wood ..."
      );
      //    TurnToward(tree);
      Repeat
      Until (!Faellen(me, axe, tree, me.x, me.y, ReqAbbau));
    Else
      Case (RandomInt(4))
        0: SendSysMessagePergon(me,
          "Ihr wundert Euch ueber diese seltsame Pflanze.",
          "Your start to wonder about that strange plant."
        );
        1: SendSysMessagePergon(me,
          "Hmm, wo soll ich anfangen?",
          "Hmm, where should I start?"
        );
        2: SendSysMessagePergon(me,
          "Irgendwie schaut das schlagbar aus.",
          "Somehow that seems useful."
        );
        3: SendSysMessagePergon(me,
          "Ihr seid nicht gut genug, um dieses Holz zu schlagen.",
          "Your qualification is not sufficient for this wood."
        );
      EndCase

      return;
    EndIf
  EndIf
EndProgram // }}}

var holzname;
// Hauptfunktion
Function Faellen(me, axe, tree, mex, mey, ReqAbbau) // {{{
  //////////////////////////////
  //
  // Holz vorhanden?
  // Wenn künstlicher Baum, nicht GetHavestDifficulty, prop "wood" enthält aktuelle Holzmenge (max 100%)
  //
  //////////////////////////////

  var treewood := GetObjProperty(tree.item, "wood");
  var difficulty := GetHarvestDifficulty(
    "wood", tree.x, tree.y, tree.objtype, tree.realm
  );

  If (difficulty == error)
    If (GetObjProperty(tree.item, "set") <> error)
      If (treewood <= 0)
        SendSysMessagePergon(me, "Baum fällt!",
                                 "Tree is falling!");
        var fserial := Getobjproperty(tree.item, "fserial");
        Sleep (2);
        CreateItemAtLocationPergon(
          tree.x, tree.y, tree.z, UOBJ_STUMP, 1, tree.realm
        );
        var maintree := SystemFindObjectBySerial(fserial);
        If (maintree.getprop("items"))  // Schnelle Variante?
          var items := maintree.getprop("items");
          var temp;
          ForEach item in items
            temp := SystemFindObjectBySerial(item);
            If (temp)
              DestroyItem(temp);
            EndIf
          EndForEach
        Else
          DestroySet(fserial);
        EndIf

        return 0;
      EndIf
    Else
      SendSysMessagePergon(me,
        "Dieser Baum hat kein schlagbares Holz mehr.",
        "This tree is empty"
      );
      return 0;
    EndIf
  EndIf

  //////////////////////////////
  //
  // Axtqualtität iO?
  //
  //////////////////////////////

  var axt := GetPropertyItem(axe);

  var axequali := axt.hp*100.0/axt.maxhporig; // axequali gibt die %-punkte der axt an gegeueber 100% Maxhp - also praktisch ob die axt noch scharf ist
  If (axequali < 20)
    SendSysMessagePergon(me,
      "Eure Axt ist kaum noch zu gebrauchen.", "Your axe is nearly worn-out."
    );
  ElseIf (axequali < 50)
    SendSysMessagePergon(me,
      "Eure Axt ist stumpf.", "Your axe is edgeless."
    );
  EndIf

  //////////////////////////////
  //
  // Anzahl der Schläge bestimmen????
  // Schlaggeschwindigkeit nach Skill
  //
  //////////////////////////////


  // 100%-axequali%*0.1 von 10 durchlaeufen
  axequali := cint((100.0-axequali)*(10.0/100.0));

  var num_chops_skill := cint((100-GetSkillPergon(me, SKILLID_HOLZFAELLEN))/10.0);


  var num_chops := (axequali+num_chops_skill)/2;

  If (num_chops<2)
    num_chops := 2;
  ElseIf (num_chops>10)
    num_chops := 10;
  EndIf

  var i;
  var wood_amount;
  var holzmenge;
  var norm_menge;
  For(i := 1; i <= num_chops; i += 1)
    performaction(me, UACTION_CHOP);
    PlaySoundEffect(me, SFX_SKILL_LUMBERJACK);
    Sleep(1);
    If ((me.x != mex) or (me.y != mey))
      SendSysMessagePergon(me, "Ihr beendet das Fällen des Baumes.", "You stop chopping wood.");
      return 0;
    EndIf
  EndFor

  // Erneut wood auslesen gegen Mehrfachnutzung Baum, just in Case

  treewood := GetObjProperty(tree.item, "wood");

  // var treewood1 := GetObjProperty(tree.item, "wood") + 0.2;
  // var Rand := RandomInt(100);
  //
  // If (treewood1 < treewood)
  //  If (Rand >= 60)
  //          SendSysMessagePergon(me, "Ihr haut dem anderen Holzfäller auf die Finger.", "You hit the other lumberjacker instead.");
  //  ElseIf (Rand >= 2)
  //          SendSysMessagePergon(me, "Der andere Holzfäller trifft Euch.", "You were hit by the other lumberjacker.");
  //    ApplyRawDamagePergon(me, randomint(25)+5);
  //  Else
  //          SendSysMessagePergon(me, "Der andere Holzfäller trifft Euch am Kopf.", "You were hit by the other lumberjacker on the head.");
  //    RevokePrivilege(me, "invul");
  //    KillMobile(me);
  //  EndIf
  // return 0;
  // EndIf


  //////////////////////////////
  //
  // Skill erhöhen, Wurzeln stapeln (2%)
  //
  //////////////////////////////

  If (CheckSkillPergon(me, SKILLID_HOLZFAELLEN, ReqAbbau, 3/2.0 * ReqAbbau / GetSkillmod(GeschlagenesHolz)))

    If (RandomInt(100) >= 98)
      If (
        treewood or
        HarvestResource("wood", tree.x, tree.y, 1, 1, tree.realm)
      )
        // If (FindObjtypeInContainer(me.backpack, UOBJ_WURZEL))
        //   CreateItemInInventoryPergon(me.backpack, UOBJ_WURZEL, 5);
        // Else
        CreateItemInBackpackPergon(me, UOBJ_WURZEL, 3 + RandomInt(5));
        // EndIf
        SendSysMessagePergon(me,
          "Ihr habt etwas Unterholz gefunden.", "You found some roots."
        );

        return (1); // Shinigami... kein Abbruch
      EndIf

      //////////////////////////////
      //
      // Holzmenge ermitteln (AxtQuali, Skillhöhe)
      //
      //////////////////////////////

    Else

      // Ermittelt die Holzmenge nach Skill und Axtqualität. (Energium except axt.hp == 240 max)
      holzmenge := CInt(((GetSkillPergon(me, SKILLID_HOLZFAELLEN) - ReqAbbau)/4.0+15)*axt.hp/180.0);
      If (holzmenge >= 15) holzmenge := 15;
      ElseIf (holzmenge <= 5) holzmenge := 5;
      EndIf

      // Holzmenge auf 100 Holz/Baum (Pergonweit) normiert
      norm_menge := holzmenge * 100 / GetHolzmenge(GeschlagenesHolz, treewood);

      // zieht normierte Menge vom Bestand (100 max) ab
      If (treewood <> error)
        If (treewood <= 0)
          SendSysMessagePergon(me, "Baum fällt!",
                                   "Tree is falling!");
          var fserial := Getobjproperty(tree.item, "fserial");
          Sleep (2);
          CreateItemAtLocationPergon(
            tree.x, tree.y, tree.z, UOBJ_STUMP, 1, tree.realm
          );
          var maintree := SystemFindObjectBySerial(fserial);
          If (maintree.getprop("items"))  // Schnelle Variante?
            var items := maintree.getprop("items");
            var temp;
            ForEach item in items
              temp := SystemFindObjectBySerial(item);
              If (temp)
                DestroyItem(temp);
              EndIf
            EndForEach
          Else
            DestroySet(fserial);
          EndIf

          return (0);
        Else
          // Ausgabe des ObjTypes an CmdLevel, zwecks Testen
          If (me.cmdlevel >= CMDLEVEL_SEER)
            SendSysMessagePergon(me, "Treewood: " + treewood, " ");
          EndIf

          var treewoodneu := treewood - norm_menge/350;
          wood_amount := norm_menge;
          If (treewoodneu < 0)
            wood_amount -= (treewoodneu* (-350));
          EndIf
          var set := GetObjProperty(tree.item, "set");
          var serial := GetObjProperty(tree.item, "fserial");
          var maintree := SystemFindObjectBySerial(serial);
          If (maintree.getprop("items"))  // Schnelle Variante?
            var items := maintree.getprop("items");
            var temp;
            ForEach slave in items
              temp := SystemFindObjectBySerial(slave);
              If (temp)
                temp.setprop("wood", treewoodneu);
              EndIf
            EndForEach
          Else
            ChangePropertySet(set, serial, "wood", treewoodneu);
          EndIf
          //    If (! ChangePropertySet(set, serial, "wood", treewoodneu))
          //      // print("Fehler, Holzmenge konnte nicht vom Baum abgezogen werden");
          //    EndIf
        EndIf
      Else
        If (norm_menge)
          wood_amount := HarvestResource("wood", tree.x, tree.y, 1, norm_menge, tree.realm);
        Else
          wood_amount := 0;
        EndIf

        If (wood_amount == 0)
          SendSysMessagePergon(me, "Hier ist zu wenig Holz. Es lohnt sich nicht.",
                                   "Here's not enough wood. It's not worthwhile.");
          return (0);
        EndIf

      EndIf
      //////////////////////////////
      //
      // Legt Holz ins Backpack
      //
      //////////////////////////////

      // normierung für geerntete Holzmenge aus Harvestressource holen (nötig für den letzten Schlag)
      holzmenge := CInt(wood_amount * GetHolzmenge(GeschlagenesHolz, treewood) / 100);
      If (holzmenge == 0)
        holzmenge := 1;
      EndIf

      CreateItemInBackpackPergon(me, GeschlagenesHolz, holzmenge);

      If (holzname)
        SendSysMessagePergon(me,
          "Ihr packt "+Endung(holzmenge, holzname+"stamm", holzname+"stämme")+" in Euren Rucksack.",
          "You put "+Endung(holzmenge, "log", "logs")+" into your backpack."
        );
      Else
        SendSysMessagePergon(me,
          "Ihr packt "+Endung(holzmenge, "Stamm", "Stämme")+" in Euren Rucksack.",
          "You put "+Endung(holzmenge, "log", "logs")+" into your backpack."
        );
      EndIf
      return (1);
    EndIf

  Else
    Case (RandomInt(4))
    0:
      SendSysMessagePergon(me,
        "Ihr konntet kein Holz schlagen.", "You couldn't chop wood."
      );
    1:
      SendSysMessagePergon(me,
        "Ihr legt einige Holzspäne in Euren Rucksack.",
        "You put some kindlings in your backpack."
      );
      CreateItemInBackpackPergon(me, UOBJ_KINDLING, RandomInt(2)+2);
    2:
      SendSysMessagePergon(me,
        "Ihr müsst weiterschlagen.", "You have to continue."
      );
    3:
      SendSysMessagePergon(me,
        "Ihr schlagt weiter.", "You continue chopping."
      );
    EndCase

    // bei 50% der Fehlversuche werden je nach Skill Staemme auf der
    // Koordinate abgezogen, sind also nicht mehr hackbar
    If (RandomInt(100) < 50)
      If (treewood <> error)
        If (treewood <= 0)
          SendSysMessagePergon(me, "Baum fällt!", "Tree is falling!");
          var fserial := Getobjproperty(tree.item, "fserial");
          Sleep (2);
          CreateItemAtLocationPergon(
            tree.x, tree.y, tree.z, UOBJ_STUMP, 1, tree.realm
          );
          var maintree := SystemFindObjectBySerial(fserial);
          If (maintree.getprop("items"))  // Schnelle Variante?
            var items := maintree.getprop("items");
            var temp;
            ForEach item in items
              temp := SystemFindObjectBySerial(item);
              If (temp)
                DestroyItem(temp);
              EndIf
            EndForEach
          Else
            DestroySet(fserial);
          EndIf

          return (0);
        Else

          // Ermittelt die Holzmenge nach Skill und Axtqualität.
          // (Energium except axt.hp == 240 max)
          holzmenge := CInt(
            (
              15 + (GetSkillPergon(me, SKILLID_HOLZFAELLEN) - ReqAbbau)/4.0
            )*axt.hp/180.0
          );
          holzmenge := Min(15, Max(5, holzmenge));
          // Holzmenge auf 100 Holz/Baum (Pergonweit) normiert
          norm_menge := holzmenge * 100 / GetHolzmenge(
            GeschlagenesHolz, treewood
          );
          // Ausgabe der vorhandenen Holzmenge an CmdLevel
          If (me.cmdlevel >= CMDLEVEL_SEER)
            SendSysMessagePergon(me, "Treewood: " + treewood, " ");
          EndIf

          var treewoodneu := treewood - norm_menge/350;
          wood_amount := norm_menge;
          If (treewoodneu < 0)
            wood_amount := wood_amount - treewoodneu* (-350);
          EndIf
          var set := GetObjProperty(tree.item, "set");
          var serial := GetObjProperty(tree.item, "fserial");
          var maintree := SystemFindObjectBySerial(serial);
          If (maintree.getprop("items"))  // Schnelle Variante?
            var items := maintree.getprop("items");
            var temp;
            ForEach slave in items
              temp := SystemFindObjectBySerial(slave);
              If (temp)
                temp.setprop("wood", treewoodneu);
              EndIf
            EndForEach
          Else
            ChangePropertySet(set, serial, "wood", treewoodneu);
          EndIf
        EndIf
      Else
        If (norm_menge)
          wood_amount := HarvestResource(
            "wood", tree.x, tree.y, 1, norm_menge, tree.realm
          );
        Else
          wood_amount := 0;
        EndIf

        If (wood_amount == 0)
          SendSysMessagePergon(me,
            "Hier ist zu wenig Holz. Es lohnt sich nicht.",
            "Here's not enough wood. It's not worthwhile."
          );
          return (0);
        EndIf

      EndIf
    EndIf

    If (SetWerkzeugSchaden(me, axe,
        "Die Axt hat gelitten!", "Die Axt ist stark beschädigt!",
        "Die Axt ist zerbrochen!"
    ))
      return;
    EndIf

    return (1);
  EndIf
EndFunction // }}}

// Baum/Moebelstueck auswaehlen
Function SelectTree(me) // {{{
  SendSysMessagePergon(me,
    "Wählt etwas zum Hacken aus!", "Choose a tree to chop."
  );

  var tree := TargetCoordinates(me);
  If (!tree)
    SendSysMessagePergon(me, "Abbruch", "Abort");
    exit;
  EndIf

  If (CoordinateDistance(me.x, me.y, tree.x, tree.y) > 1)
    If (!tree.item.container)
      SendSysMessagePergon(me,
        "Das ist viel zu weit weg!", "That's too far away!"
      );
      exit;
    EndIf
  EndIf

  // Ausgabe des ObjTypes an CmdLevel, zwecks Testen
  If (me.cmdlevel >= CMDLEVEL_SEER)
    SendSysMessagePergon(me, "ObjType: "+tree.objtype);
  EndIf

  If (IsFurniture(tree.item.objtype))
    ChopFurniture (me, tree.item);
    exit;

  ElseIf (IsTree(tree.objtype))

    var difficulty := GetHarvestDifficulty(
      "wood", tree.x, tree.y, tree.objtype, tree.realm
    );
    If (difficulty == error)
      var treewood1 := GetObjProperty(tree.item, "wood");
      If (GetObjProperty(tree.item, "set") <>error)
        If (treewood1 <= 0)
          SendSysMessagePergon(me,
            "Baum fällt!", "Tree is falling!"
          );
          var fserial := Getobjproperty(tree.item, "fserial");
          Sleep (2);
          CreateItemAtLocationPergon(
            tree.x, tree.y, tree.z, UOBJ_STUMP, 1, tree.realm
          );
          var maintree := SystemFindObjectBySerial(fserial);
          If (maintree.getprop("items"))  // Schnelle Variante?
            var items := maintree.getprop("items");
            var temp;
            ForEach item in items
              temp := SystemFindObjectBySerial(item);
              If (temp)
                DestroyItem(temp);
              EndIf
            EndForEach
          Else
            DestroySet(fserial);
          EndIf

          return 0;
        EndIf
      EndIf
    EndIf
    // by F.

    // Edelholz ausserhalb der Case-Anweisung, weil mir fast 80 Eintraege
    // zu viel sind. Ansonsten könntes auch in der Case-Anweisung stehen
    // F.
    If ((tree.objtype >= 0xd41) && (tree.objtype <= 0xd90))
      GeschlagenesHolz := 0x7015; holzname := "Edel";
      // solang man JhelomNewbie ist aus Edelbaum normales Holz, da es
      // keine normalen Bäume auf Jhelom gibt
      If (GetObjProperty(me, TYPNEWBIE))
        GeschlagenesHolz := UOBJ_LOGS; holzname := "Misch";
      EndIf
    Else
      Case (tree.objtype) // {{{
        0x0c95:
        0x0c96:
        0x0ca8:
        0x0caa:
        0x0cab: GeschlagenesHolz := 0x7019; holzname := "Tropen";
        0x0cca:
        0x0ccb: GeschlagenesHolz := 0x7010; holzname := "Mahagony";
        0x0cd6:
        0x0cd7:
        0x0cd8:
        0x0cd9: GeschlagenesHolz := 0x701b; holzname := "Zeder";
        0x0cda:
        0x0cdb:
        0x0cdc:
        0x0cdd:
        0x0cde:
        0x0cdf: GeschlagenesHolz := 0x7018; holzname := "Eichen";
        0x0ce0:
        0x0ce1:
        0x0ce2:
        0x0ce3:
        0x0ce4:
        0x0ce5: GeschlagenesHolz := 0x7012; holzname := "Walnuss";
        0x0ce6:
        0x0ce7:
        0x0ce8: GeschlagenesHolz := 0x7016; holzname := "Weiden";
        0x0cf8:
        0x0cf9:
        0x0cfa:
        0x0cfb:
        0x0cfc:
        0x0cfd:
        0x0cfe:
        0x0cff:
        0x0d00:
        0x0d01:
        0x0d02:
        0x0d03: GeschlagenesHolz := 0x7017; holzname := "Zypressen";
        0x0d94:
        0x0d95:
        0x0d96:
        0x0d97:
        0x0d98:
        0x0d99:
        0x0d9a:
        0x0d9b: GeschlagenesHolz := 0x7013; holzname := "Apfel";
        0x0d9c:
        0x0d9d:
        0x0d9e:
        0x0d9f:
        0x0da1:
        0x0da2:
        0x0da3: GeschlagenesHolz := 0x701a; holzname := "Pfirsich";
        0x0da4:
        0x0da5:
        0x0da6:
        0x0da7:
        0x0da8:
        0x0da9:
        0x0daa:
        0x0dab: GeschlagenesHolz := 0x7014; holzname := "Birnen";
        0x224b: GeschlagenesHolz := 0x701e; holzname := "Fichten";
        0x224c: GeschlagenesHolz := 0x701d; holzname := "Erlen";
        0x224d: GeschlagenesHolz := 0x701c; holzname := "Tannen";
        0x247a:
        0x247e: GeschlagenesHolz := 0x701f; holzname := "Buche";
        0x2471:
        0x247d: GeschlagenesHolz := 0x7010; holzname := "Mahagoni";
        0x224a: GeschlagenesHolz := 0x7020; holzname := "Eben";
        0x26ed:
        0x26f3: GeschlagenesHolz := 0x7021; holzname := "Elfenbein";
        default: // normal
                GeschlagenesHolz := UOBJ_LOGS; holzname := "Misch";
      EndCase // }}}
    EndIf
    return tree;
  Else
    SendSysMessagePergon(me,
      "Ihr könnt dies nicht fällen!", "You cannot chop that!"
    );
    return 0;
  EndIf
EndFunction // }}}

// Axt in die Hand nehmen
Function IsAxequipped (me, axe) // {{{
  // FIXME: Axt ist immer im selben Layer, Schleife sparen
  // FIXME: Distance-Check kaputt/albern
  If ((!AccessiblePergon(me, axe)) or (distance(me, axe) > 1))
    return 0;
  EndIf

  ForEach item in ListEquippedItems(me)
    If (axe.serial == item.serial)
      return 1;
    EndIf
  EndForEach

  return EquipItem(me, axe);
EndFunction // }}}

// ist Item Moebelstueck?
Function IsFurniture(obj) // {{{
  If ((obj >= 0xa2a) and (obj <= 0xa2b))
    return 1;
  ElseIf ((obj >= 0x9a8) and (obj <= 0x9ab))
    return 1;
  ElseIf ((obj >= 0xb2c) and (obj <= 0xb40))
    return 1;
  ElseIf ((obj >= 0xb49) and (obj <= 0xb90))
    return 1;
  ElseIf ((obj >= 0xf65) and (obj <= 0xf75))
    return 1;
  ElseIf ((obj >= 0xe3c) and (obj <= 0xe43))
    return 1;
  ElseIf ((obj >= 0xa4d) and (obj <= 0xa53))
    return 1;
  ElseIf ((obj >= 0xa97) and (obj <= 0xa9e))
    return 1;
  ElseIf ((obj >= 0xe7c) and (obj <= 0xe80))
    return 1;
  ElseIf (
    (obj == 0xa2c) or (obj == 0xa30) or (obj == 0xa34) or
    (obj == 0xa38) or (obj == 0xa4c) or (obj == 0xf76) or
    (obj == 0xfae) or (obj == 0x70e0)
  )
    return 1;
  EndIf

  return 0;
EndFunction // }}}

// Moebel zerhacken
Function ChopFurniture(me, obj) // {{{
  If (obj.movable == 0)
    SendSysMessagePergon(me,
      "Ihr könnt es nicht zerstören, solange es fest verankert ist!",
      "You cannot destroy that while it's unmovable!"
    );
    return;
  EndIf
  If (!AccessiblePergon(me, obj))
    SendSysMessagePergon (me,
      "Ihr kommt dort nicht ran!", "You cannot reach that!"
    );
    return;
  EndIf
  If (me.multi)
    If (GetObjProperty((me.multi), PROP_HS_C_OWNER) <> me.serial)
      SendSysMessagePergon(me,
        "Das gehört Euch nicht!", "That's not yours!"
      );
      return;
    EndIf
  EndIf

  // Inhalt ggf. herausholen
  ForEach thing in EnumerateItemsInContainer(obj)
    If (obj.container)
      MoveItemToContainer(thing, obj.container);
    Else
      MoveObjectToLocation(
        thing, obj.x, obj.y, obj.z, obj.realm,
        MOVEOBJECT_FORCELOCATION
      );
    EndIf
  EndForEach

  DestroyItem(obj);

  PlaySoundEffect(me, SFX_13A);

  return;
EndFunction // }}}

// Liesst aus Datei itemdesc.cfg den Benötigten Skill für die jeweilige Baumart
Function GetReqAbbau(wood) // {{{
  var cfgfile := ReadConfigFile("itemdesc");
  var element := FindConfigElem(cfgfile, wood);
  return GetConfigInt(element, "ReqAbbau");
EndFunction // }}}

// Liesst aus Datei itemdesc.cfg die Holzmenge für die jeweilige Baumart
// (normiert zu Pergonweit 100 Harvestressource)
Function GetHolzmenge(wood, foerster) // {{{
 var cfgfile := ReadConfigFile("itemdesc");
 var element := FindConfigElem(cfgfile, wood);

 var menge;
 If (foerster <> error)
  menge := GetConfigInt(element, "woodamount_foerster");
 Else
  // Shinigami: Mal eben erhoeht... die Mengen sind doch ein Witz, das
  // frisst auch Zeit
  menge := GetConfigInt(element, "woodamount_pergon")*4;
 EndIf

 return menge;
EndFunction // }}}

// Liesst aus Datei itemdesc.cfg den Skillmod für die jeweilige Baumart
Function GetSkillmod(wood) // {{{
  var cfgfile := ReadConfigFile("itemdesc");
  var element := FindConfigElem(cfgfile, wood);
  return GetConfigReal(element, "skill_mod");
EndFunction // }}}

// vim: sw=2 sts=2
