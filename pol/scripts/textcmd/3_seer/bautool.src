///////////////////////////////////////////////////////////////////////////
// bautool - bequemes Erzeugen und Verändern von Items und Itemgruppen
//
// Author: Turley

// Konfigurationsdateien
// - Menustruktur
//   - bautoolmenues.cfg
// - Erstellt Rechtecke mit Tiles (Zufällig oder nur einen)
//   - bautoolrandom.cfg
// - Erstellt einzelne Items
//   - bautooleinzel.cfg
// - Erstellt Sets
//   - bautoolset.cfg

///////////////////////////////////////////////////////////////////////////
// ToDo:
// Zufallsding
//  - Auswahlliste wie Random/Einzel/Sets
//  - Wählt aus plus Wahrscheinlichkeiten
//  - Wenn fertig zusammengestellt Eck-Koords angeben und
//    createn, immer auf Maphöhe

Use cfgfile;
Use os;
Use uo;
Use util;

Include "include/client";
Include "include/datafile";
Include "include/itemnpc";
Include "include/msgs";
Include "include/server";
Include "include/set";
Include "include/string";

Const VERSION:="<basefont color="+HTML_LIGHTGRAY+">V4.2a";

Enum TextEntry_Checkboxes
  ITEMCOLOR:=1000,
  ITEMRAND,
  ITEMCREATE,
  ITEMPOS,
  ITEMMODIFY,
  ITEMMMULTICREATE,
  ITEMMODIFYMANUAL,  // ModifyMenü zum späteren Ändern
  MODIFY_Z_START,
  MODIFY_Z_END,
  MODIFY_CUSTOM,
  MODIFY_MARK,
  MODIFY_X_ENTRY,
  MODIFY_Y_ENTRY,
  MODIFY_Z_ENTRY
EndEnum

Enum Buttons
  BACKBUTTON      :=2000,  // Zurück-Button
  MODIFY_MARKEDIT,
  MODIFY_START    :=3000,
  MODIFY_Y_UP     :=3005,  // ModifyItem-Buttons
  MODIFY_Y_DOWN,
  MODIFY_X_UP,
  MODIFY_X_DOWN,
  MODIFY_XY_MM,
  MODIFY_XY_MP,
  MODIFY_XY_PM,
  MODIFY_XY_PP,
  MODIFY_Z_UP,
  MODIFY_Z_DOWN,
  MODIFY_DESTROY,
  MODIFY_COLOR,
  MODIFY_DUPE,
  MODIFY_X,
  MODIFY_Y,
  MODIFY_Z,
  MARK_SHOW,
  MARK_HIDE,
  MARK_EDIT
EndEnum

Enum dataPositionsAngaben
  COLORDATAPOS:=7,
  ZSTARTPOS   :=15,
  ZENDPOS     :=16,
  XKOORDSPOS  :=8,
  YKOORDSPOS  :=9,
  ZKOORDSPOS  :=10,
  XENTRY      :=12,
  YENTRY,
  ZENTRY
EndEnum

Enum Ebenen
  ROOTLIST:=0, // Ebenendefinition
  FIRSTLIST,
  SECONDLIST,
  THIRDLIST,
  FOURTHLIST,
  FIFTHLIST,
  ITEMLIST,
  ITEMLISTDUMMY
EndEnum

Const MENUSTART := 4000;  // StartWert der Listen/Itembuttons

Const MAXBUTTON   := 7;  // Max Buttons in der NavBar
Const MAXLINEITEM := 4;  // Wieviel Items nebeneinander bei EinzelCreate

Const ITEMMOVEFLAGS := MOVEOBJECT_FORCELOCATION+MOVEITEM_IGNOREMOVABLE;

// Alles Laden was man so benötigt
Var cfgrandom:=ReadConfigFile("bautoolrandom");
Var cfgeinzel:=ReadConfigFile("bautooleinzel");
Var cfgset   :=ReadConfigFile("bautoolset");
Var datafile :=DFOpenDataFile("bautoolcmd", DF_CREATE, DF_KEYTYPE_STRING);
Var dataelementMenu   :=datafile.FindElement("menu");
Var dataelementModify :=datafile.FindElement("modify");
Var dataelementElement:=datafile.FindElement("elemente");
Var dataelementMark   :=datafile.FindElement("modifymark");
Var layoutmodify   :=dataelementModify.getprop("LayoutMenu");
Var datamodify     :=dataelementModify.getprop("DataMenu");
Var layoutmodify_M :=dataelementModify.getprop("LayoutMenuManual");
Var datamodify_M   :=dataelementModify.getprop("DataMenuManual");
Var layoutmark     :=dataelementMark.getprop("LayoutMenuMark");
Var datamark       :=dataelementMark.getprop("DataMenuMark");
Var datafileelement:=dataelementElement.getprop("dictionary");


Program bautool(who, param)
  If (who[1]=="Init") // Per Script Datafile erzeugen
    Init();
    Return;
  EndIf

  If (!GetGlobalProperty(BAUSERVER))
    If (who.cmdlevel<CMDLEVEL_GM)
      SendSysMessagePergon(who,"Ihr seid nicht befugt diesen Befehl zu nutzen!");
      Return;
    EndIf
  EndIf

  If (Lower(param)=="init")  // Developer darf manuell Init() anschmeißen
    If (who.cmdlevel==CMDLEVEL_DEVELOPER)
      cfgrandom:=0;  // Erst Ref's entfernen damit Unload sauber funzt
      cfgeinzel:=0;
      cfgset:=0;
      UnloadConfigFile("bautoolmenues");
      UnloadConfigFile("bautooleinzel");
      UnloadConfigFile("bautoolrandom");
      UnloadConfigFile("bautoolset");
      cfgrandom:=ReadConfigFile("bautoolrandom");
      cfgeinzel:=ReadConfigFile("bautooleinzel");
      cfgset   :=ReadConfigFile("bautoolset");
      SendSysMessagePergon(who,"Datafile building...");
      Init();
      SendSysMessagePergon(who,"Datafile completed");
      Return;
    EndIf
  EndIf

  If (GetGlobalProperty("bautoolinit"))
    SendSysMessagePergon(who,"Datafile wird noch erzeugt, probiere es später nochmal.");
    Return;
  EndIf

  ShowMenu(who);

EndProgram

///////////////////////////////////
// ShowMenu - Eigentlicher Hauptteil
///////////////////////////////////

Function ShowMenu(who) // {{{
  Var data:={}, layout:={}, nr, ebene;
  Var ret, tile:={};
  Var element:=dictionary, back:=0;
  Var firstebene,secondebene,thirdebene,fourthebene,fifthebene,itemebene;
  Var color;

  element:=datafileelement;

  //Jetzt kann es losgehen
  ebene:=FIRSTLIST;
  layout:=dataelementMenu.getprop("LayoutMenuBar");
  data:=dataelementMenu.getprop("DataMenuBar");

  ret:=SendDialogGump(who,layout,data,10,50);

  While (who.connected)
    If ((ret.keys[ret.keys.size()]>MENUSTART) || (back))
      If (back) //Simulierter Buttondruck
        nr:=back;
        back:=0;
      Else
        nr:=ret.keys[ret.keys.size()]-MENUSTART;
      EndIf
      Case (ebene)  // In welcher Anzeigeebene befinde ich mich, passende dataListe erstellen
        ROOTLIST:
          ebene:=FIRSTLIST;
          layout:=dataelementMenu.getprop("LayoutMenuBar");
          data:=dataelementMenu.getprop("DataMenuBar");

        FIRSTLIST:
          ebene:=SECONDLIST;
          If (TypeOfInt(nr)==OT_STRING)
            firstebene:=nr;
          Else
            firstebene:=element.keys()[nr];
          EndIf
          layout:=dataelementMenu.getprop("LayoutMain_"+firstebene);
          data:=dataelementMenu.getprop("DataMain_"+firstebene);

        SECONDLIST:
          ebene:=THIRDLIST;
          If (TypeOfInt(element[firstebene])<>OT_DICTIONARY)
            secondebene:=nr;
            tile:=BuildItems(layout,data,element[firstebene][nr],firstebene);
          Else
            If (TypeOfInt(nr)==OT_STRING)
              secondebene:=nr;
            Else
              secondebene:=element[firstebene].keys()[nr];
            EndIf
            layout:=dataelementMenu.getprop("LayoutSub_"+firstebene+"_"+secondebene);
            data:=dataelementMenu.getprop("DataSub_"+firstebene+"_"+secondebene);
          EndIf

        THIRDLIST:
          ebene:=FOURTHLIST;
          If (TypeOfInt(element[firstebene][secondebene])<>OT_DICTIONARY)
            thirdebene:=nr;
            tile:=BuildItems(layout,data,element[firstebene][secondebene][nr],firstebene,secondebene);
          Else
            If (TypeOfInt(nr)==OT_STRING)
              thirdebene:=nr;
            Else
              thirdebene:=element[firstebene][secondebene].keys()[nr];
            EndIf
            layout:=dataelementMenu.getprop("LayoutSub_"+firstebene+"_"+secondebene+"_"+thirdebene);
            data:=dataelementMenu.getprop("DataSub_"+firstebene+"_"+secondebene+"_"+thirdebene);
          EndIf

        FOURTHLIST:
          ebene:=FIFTHLIST;
          If (TypeOfInt(element[firstebene][secondebene][thirdebene])<>OT_DICTIONARY)
            fourthebene:=nr;
            tile:=BuildItems(layout,data,element[firstebene][secondebene][thirdebene][nr],firstebene,secondebene,thirdebene);
          Else
            ebene:=FIFTHLIST;
            If (TypeOfInt(nr)==OT_STRING)
              fourthebene:=nr;
            Else
              fourthebene:=element[firstebene][secondebene][thirdebene].keys()[nr];
            EndIf
            layout:=dataelementMenu.getprop("LayoutSub_"+firstebene+"_"+secondebene+"_"+thirdebene+"_"+fourthebene);
            data:=dataelementMenu.getprop("DataSub_"+firstebene+"_"+secondebene+"_"+thirdebene+"_"+fourthebene);
          EndIf

        FIFTHLIST:
          ebene:=ITEMLIST;
          If (TypeOfInt(element[firstebene][secondebene][thirdebene][fourthebene])<>OT_DICTIONARY)
            fifthebene:=nr;
            tile:=BuildItems(layout,data,element[firstebene][secondebene][thirdebene][fourthebene][nr],firstebene,secondebene,thirdebene,fourthebene);
          Else
            ebene:=ITEMLIST;
            If (TypeOfInt(nr)==OT_STRING)
              fifthebene:=nr;
            Else
              fifthebene:=element[firstebene][secondebene][thirdebene][fourthebene].keys()[nr];
            EndIf
            layout:=dataelementMenu.getprop("LayoutSub_"+firstebene+"_"+secondebene+"_"+thirdebene+"_"+fourthebene+"_"+fifthebene);
            data:=dataelementMenu.getprop("DataSub_"+firstebene+"_"+secondebene+"_"+thirdebene+"_"+fourthebene+"_"+fifthebene);
          EndIf

        ITEMLIST:
        ITEMLISTDUMMY:
          ebene:=ITEMLISTDUMMY;
          If (TypeOfInt(nr)==OT_STRING)
            itemebene:=nr;
          Else
            itemebene:=element[firstebene][secondebene][thirdebene][fourthebene][fifthebene][nr];
          EndIf
          tile:=BuildItems(layout,data,element[firstebene][secondebene][thirdebene][fourthebene][fifthebene][nr],firstebene,secondebene,thirdebene,fourthebene,fifthebene,itemebene[1]);

      EndCase
      ret:=SendDialogGump(who,layout,data,10,50);

    ElseIf (ret[BACKBUTTON])  //Zurück
      ebene-=2;  // 2 weil schon vorher eins dazugezählt wurde
      If (ebene<0)
        ebene:=ROOTLIST;
      EndIf
      Case (ebene)
        ROOTLIST:
          back:=1;
        FIRSTLIST:
          back:=firstebene;
        SECONDLIST:
          back:=secondebene;
        THIRDLIST:
          back:=thirdebene;
        FOURTHLIST:
          back:=fourthebene;
        FIFTHLIST:
          back:=fifthebene;
        ITEMLIST:
          back:=itemebene;
        ITEMLISTDUMMY:
          back:=itemebene;
      EndCase

    // Der Interessante Kram Itemerzeugen
    ElseIf (ret[ITEMCREATE])
      ebene-=1;
      back:=nr; //Damit keine Endloßschleife mit Create entsteht
      color:=ret[ITEMCOLOR];
      color[1,6]:="";
      color:=CInt(color);
      Case (tile[1][2])
        "Random":
          CreateRandom(who,ret,tile[2],tile[3],color,tile[1][1]);
        "Einzel":
          CreateEinzel(who,ret,tile[2],color);
        "Set":
          CreateSet(who,ret,tile[2],color);
        default:
          SendSysMessagePergon(who,"Fehler...");
          Return;
      EndCase

    // Manuelles ItemModify
    ElseIf (ret[ITEMMODIFYMANUAL])
      ModifyItemsManual(who);
      back:=1;
      ebene:=ROOTLIST;
    Else
      Return; //Winke
    EndIf
  EndWhile
EndFunction // }}}


///////////////////////////////////
// BuildItems - layout/data + spezieller Kram
//   der Itemcreategumps besorgen
///////////////////////////////////

Function BuildItems(byref layout,byref data,byref element,firstebene,secondebene:=0,thirdebene:=0,fourthebene:=0,fifthebene:=0,itemebene:=0) // {{{
  Var tiles:={};
  Var tiles1:={};
  Var splittiles:={};

  If (itemebene)
    layout:=dataelementMenu.getprop("LayoutItem_"+firstebene+"_"+secondebene+"_"+thirdebene+"_"+fourthebene+"_"+fifthebene+"_"+itemebene);
    data:=dataelementMenu.getprop("DataItem_"+firstebene+"_"+secondebene+"_"+thirdebene+"_"+fourthebene+"_"+fifthebene+"_"+itemebene);
  ElseIf (fifthebene)
    layout:=dataelementMenu.getprop("LayoutItem_"+firstebene+"_"+secondebene+"_"+thirdebene+"_"+fourthebene+"_"+fifthebene);
    data:=dataelementMenu.getprop("DataItem_"+firstebene+"_"+secondebene+"_"+thirdebene+"_"+fourthebene+"_"+fifthebene);
  ElseIf (fourthebene)
    layout:=dataelementMenu.getprop("LayoutItem_"+firstebene+"_"+secondebene+"_"+thirdebene+"_"+fourthebene+"_"+element[1]);
    data:=dataelementMenu.getprop("DataItem_"+firstebene+"_"+secondebene+"_"+thirdebene+"_"+fourthebene+"_"+element[1]);
  ElseIf (thirdebene)
    layout:=dataelementMenu.getprop("LayoutItem_"+firstebene+"_"+secondebene+"_"+thirdebene+"_"+element[1]);
    data:=dataelementMenu.getprop("DataItem_"+firstebene+"_"+secondebene+"_"+thirdebene+"_"+element[1]);
  ElseIf (secondebene)
    layout:=dataelementMenu.getprop("LayoutItem_"+firstebene+"_"+secondebene+"_"+element[1]);
    data:=dataelementMenu.getprop("DataItem_"+firstebene+"_"+secondebene+"_"+element[1]);
  ElseIf (firstebene)
    layout:=dataelementMenu.getprop("LayoutItem_"+firstebene+"_"+element[1]);
    data:=dataelementMenu.getprop("DataItem_"+firstebene+"_"+element[1]);
  EndIf

  // Array der Items aufbauen
  Case (element[2])
    "Random":
       ForEach tile in (GetConfigStringArray(cfgrandom[element[1]],"tile"))
         splittiles:=SplitWords(tile);
         tiles.append(splittiles[1]);
         If (splittiles[2])
           tiles1.append(splittiles[2]);
         EndIf
       EndForEach

    "Einzel":
       ForEach tile in (GetConfigStringArray(cfgeinzel[element[1]],"tile"))
         If (!tiles)
           tiles:={tile};
         Else
           tiles.append(tile);
         EndIf
       EndForEach

    "Set":
       tiles:=element[1];

  EndCase
  Return({element,tiles,tiles1});
EndFunction // }}}

///////////////////////////////////
// CreateRandom - ...
///////////////////////////////////

Function CreateRandom(who, byref ret, byref tiles, byref tiles1, byref color, byref element) // {{{
  Var tar1, tar2, item, x, y, z, Tarx, Tary, Tarx2, Tary2, itemdef, items:={}, itemserials:={};

  SendSysMessagePergon(who, "Erste Ecke anvisieren");
  tar1:=TargetCoordinates(who);
  If (tar1)
    SendSysMessagePergon(who, "Zweite Ecke anvisieren");
    tar2:=TargetCoordinates(who);
    If (tar2)
      If ((tar1.item) || (tar2.item))
        If ((tar1.item.container) || (tar2.item.container))
          SendSysMessagePergon(who,"Abbruch. Item in Container anvisiert!");
          Return;
        EndIf
      EndIf
      If (tar1.x>=tar2.x)  // Sortierung des Bereiches
        Tarx:=tar2.x;
        Tarx2:=tar1.x;
      Else
        Tarx:=tar1.x;
        Tarx2:=tar2.x;
      EndIf
      If (tar1.y>=tar2.y)
        Tary:=tar2.y;
        Tary2:=tar1.y;
      Else
        Tary:=tar1.y;
        Tary2:=tar2.y;
      EndIf
      If (((Tarx2-Tarx)>MAXAREASIZE) || ((Tary2-Tary)>MAXAREASIZE))
        SendSysMessagePergon(who,
          "Abbruch. Versuch über "+MAXAREASIZE+"x"+MAXAREASIZE+
          " Items zu erzeugen!"
        );
        Return;
      EndIf
      z:=ret[ITEMPOS];
      z[1,6]:="";
      z:=CInt(z);
      //Begrenzte Ausdehnung?
      If (GetConfigString(cfgrandom[element],"x"))
        Tarx2:=Tarx+CInt(GetConfigString(cfgrandom[element],"x"))-1;
      EndIf
      If (GetConfigString(cfgrandom[element],"y"))
        Tary2:=Tary+CInt(GetConfigString(cfgrandom[element],"y"))-1;
      EndIf
      If (ret[ITEMRAND])  // Randitems sollen erzeugt werden
        For (x:=Tarx;x<=Tarx2;x+=1)
          For (y:=Tary;y<=Tary2;y+=1)
            If ((x==Tarx) && (y==Tary)) //NW Ecke
              itemdef:=GetConfigString(cfgrandom[element],"nw");
              If (!itemdef)
                SendSysMessagePergon(who, "NW-Ecke fehlt.");
              Else
                itemdef:=SplitWords(itemdef);
                itemdef:=ChooseRandom(itemdef);
                itemdef:=SplitWords(itemdef,",");
                item:=CreateItemAtLocationPergon(x,y,tar1.z+CInt(itemdef[2])+z,CInt(itemdef[1]),1,who.realm);
                If (item)
                  item.color:=color;
                  item.movable:=0;
                  items.append(item);
                Else
                  SendSysMessagePergon(who, "Createfehler! NW-Ecke Item "+x+" "+y+" "+(tar1.z+CInt(itemdef[2])+z)+" "
                                            +Hex(itemdef[1])+" ErrorText: "+item.errortext);
                EndIf
              EndIf
              //Zweites Item erzeugen
              itemdef:=GetConfigString(cfgrandom[element],"nw1");
              If ((itemdef) && (itemdef<>{}))
                itemdef:=SplitWords(itemdef);
                itemdef:=ChooseRandom(itemdef);
                itemdef:=SplitWords(itemdef,",");
                item:=CreateItemAtLocationPergon(x,y,tar1.z+CInt(itemdef[2])+z,CInt(itemdef[1]),1,who.realm);
                If (item)
                  item.color:=color;
                  item.movable:=0;
                  items.append(item);
                Else
                  SendSysMessagePergon(who, "Createfehler! NW-Ecke 2tes Item "+x+" "+y+" "+(tar1.z+CInt(itemdef[2])+z)+" "
                                            +Hex(itemdef[1])+" ErrorText: "+item.errortext);
                EndIf
              EndIf
            ElseIf ((x==Tarx2) && (y==Tary)) //NO Ecke
              itemdef:=GetConfigString(cfgrandom[element],"no");
              If (!itemdef)
                SendSysMessagePergon(who, "NO-Ecke fehlt.");
              Else
                itemdef:=SplitWords(itemdef);
                itemdef:=ChooseRandom(itemdef);
                itemdef:=SplitWords(itemdef,",");
                item:=CreateItemAtLocationPergon(x,y,tar1.z+CInt(itemdef[2])+z,CInt(itemdef[1]),1,who.realm);
                If (item)
                  item.color:=color;
                  item.movable:=0;
                  items.append(item);
                Else
                  SendSysMessagePergon(who, "Createfehler! NO-Ecke Item "+x+" "+y+" "+(tar1.z+CInt(itemdef[2])+z)+" "
                                            +Hex(itemdef[1])+" ErrorText: "+item.errortext);
                EndIf
              EndIf
              //Zweites Item erzeugen
              itemdef:=GetConfigString(cfgrandom[element],"no1");
              If ((itemdef) && (itemdef<>{}))
                itemdef:=SplitWords(itemdef);
                itemdef:=ChooseRandom(itemdef);
                itemdef:=SplitWords(itemdef,",");
                item:=CreateItemAtLocationPergon(x,y,tar1.z+CInt(itemdef[2])+z,CInt(itemdef[1]),1,who.realm);
                If (item)
                  item.color:=color;
                  item.movable:=0;
                  items.append(item);
                Else
                  SendSysMessagePergon(who, "Createfehler! NO-Ecke 2tes Item "+x+" "+y+" "+(tar1.z+CInt(itemdef[2])+z)+" "
                                            +Hex(itemdef[1])+" ErrorText: "+item.errortext);
                EndIf
              EndIf
            ElseIf ((x==Tarx2) && (y==Tary2)) //SO Ecke
              itemdef:=GetConfigString(cfgrandom[element],"so");
              If (!itemdef)
                SendSysMessagePergon(who, "SO-Ecke fehlt.");
              Else
                itemdef:=SplitWords(itemdef);
                itemdef:=ChooseRandom(itemdef);
                itemdef:=SplitWords(itemdef,",");
                item:=CreateItemAtLocationPergon(x,y,tar1.z+CInt(itemdef[2])+z,CInt(itemdef[1]),1,who.realm);
                If (item)
                  item.color:=color;
                  item.movable:=0;
                  items.append(item);
                Else
                  SendSysMessagePergon(who, "Createfehler! SO-Ecke Item "+x+" "+y+" "+(tar1.z+CInt(itemdef[2])+z)+" "
                                            +Hex(itemdef[1])+" ErrorText: "+item.errortext);
                EndIf
              EndIf
              //Zweites Item erzeugen
              itemdef:=GetConfigString(cfgrandom[element],"so1");
              If ((itemdef) && (itemdef<>{}))
                itemdef:=SplitWords(itemdef);
                itemdef:=ChooseRandom(itemdef);
                itemdef:=SplitWords(itemdef,",");
                item:=CreateItemAtLocationPergon(x,y,tar1.z+CInt(itemdef[2])+z,CInt(itemdef[1]),1,who.realm);
                If (item)
                  item.color:=color;
                  item.movable:=0;
                  items.append(item);
                Else
                  SendSysMessagePergon(who, "Createfehler! SO-Ecke 2tes Item "+x+" "+y+" "+(tar1.z+CInt(itemdef[2])+z)+" "
                                            +Hex(itemdef[1])+" ErrorText: "+item.errortext);
                EndIf
              EndIf
            ElseIf ((x==Tarx) && (y==Tary2)) //SW Ecke
              itemdef:=GetConfigString(cfgrandom[element],"sw");
              If (!itemdef)
                SendSysMessagePergon(who, "SW-Ecke fehlt.");
              Else
                itemdef:=SplitWords(itemdef);
                itemdef:=ChooseRandom(itemdef);
                itemdef:=SplitWords(itemdef,",");
                item:=CreateItemAtLocationPergon(x,y,tar1.z+CInt(itemdef[2])+z,CInt(itemdef[1]),1,who.realm);
                If (item)
                  item.color:=color;
                  item.movable:=0;
                  items.append(item);
                Else
                  SendSysMessagePergon(who, "Createfehler! SW-Ecke Item "+x+" "+y+" "+(tar1.z+CInt(itemdef[2])+z)+" "
                                            +Hex(itemdef[1])+" ErrorText: "+item.errortext);
                EndIf
              EndIf
              //Zweites Item erzeugen
              itemdef:=GetConfigString(cfgrandom[element],"sw1");
              If ((itemdef) && (itemdef<>{}))
                itemdef:=SplitWords(itemdef);
                itemdef:=ChooseRandom(itemdef);
                itemdef:=SplitWords(itemdef,",");
                item:=CreateItemAtLocationPergon(x,y,tar1.z+CInt(itemdef[2])+z,CInt(itemdef[1]),1,who.realm);
                If (item)
                  item.color:=color;
                  item.movable:=0;
                  items.append(item);
                Else
                  SendSysMessagePergon(who, "Createfehler! SW-Ecke 2tes Item "+x+" "+y+" "+(tar1.z+CInt(itemdef[2])+z)+" "
                                            +Hex(itemdef[1])+" ErrorText: "+item.errortext);
                EndIf
              EndIf
            ElseIf (y==Tary) //N Seite
              itemdef:=GetConfigString(cfgrandom[element],"n");
              If (!itemdef)
                SendSysMessagePergon(who, "N-Seite fehlt.");
              Else
                itemdef:=SplitWords(itemdef);
                itemdef:=ChooseRandom(itemdef);
                itemdef:=SplitWords(itemdef,",");
                item:=CreateItemAtLocationPergon(x,y,tar1.z+CInt(itemdef[2])+z,CInt(itemdef[1]),1,who.realm);
                If (item)
                  item.color:=color;
                  item.movable:=0;
                  items.append(item);
                Else
                  SendSysMessagePergon(who, "Createfehler! N-Seite Item "+x+" "+y+" "+(tar1.z+CInt(itemdef[2])+z)+" "
                                            +Hex(itemdef[1])+" ErrorText: "+item.errortext);
                EndIf
              EndIf
              //Zweites Item erzeugen
              itemdef:=GetConfigString(cfgrandom[element],"n1");
              If ((itemdef) && (itemdef<>{}))
                itemdef:=SplitWords(itemdef);
                itemdef:=ChooseRandom(itemdef);
                itemdef:=SplitWords(itemdef,",");
                item:=CreateItemAtLocationPergon(x,y,tar1.z+CInt(itemdef[2])+z,CInt(itemdef[1]),1,who.realm);
                If (item)
                  item.color:=color;
                  item.movable:=0;
                  items.append(item);
                Else
                  SendSysMessagePergon(who, "Createfehler! N-Seite 2tes Item "+x+" "+y+" "+(tar1.z+CInt(itemdef[2])+z)+" "
                                            +Hex(itemdef[1])+" ErrorText: "+item.errortext);
                EndIf
              EndIf
            ElseIf (x==Tarx2) //O Seite
              itemdef:=GetConfigString(cfgrandom[element],"o");
              If (!itemdef)
                SendSysMessagePergon(who, "O-Seite fehlt.");
              Else
                itemdef:=SplitWords(itemdef);
                itemdef:=ChooseRandom(itemdef);
                itemdef:=SplitWords(itemdef,",");
                item:=CreateItemAtLocationPergon(x,y,tar1.z+CInt(itemdef[2])+z,CInt(itemdef[1]),1,who.realm);
                If (item)
                  item.color:=color;
                  item.movable:=0;
                  items.append(item);
                Else
                  SendSysMessagePergon(who, "Createfehler! O-Seite Item "+x+" "+y+" "+(tar1.z+CInt(itemdef[2])+z)+" "
                                            +Hex(itemdef[1])+" ErrorText: "+item.errortext);
                EndIf
              EndIf
              //Zweites Item erzeugen
              itemdef:=GetConfigString(cfgrandom[element],"o1");
              If ((itemdef) && (itemdef<>{}))
                itemdef:=SplitWords(itemdef);
                itemdef:=ChooseRandom(itemdef);
                itemdef:=SplitWords(itemdef,",");
                item:=CreateItemAtLocationPergon(x,y,tar1.z+CInt(itemdef[2])+z,CInt(itemdef[1]),1,who.realm);
                If (item)
                  item.color:=color;
                  item.movable:=0;
                  items.append(item);
                Else
                  SendSysMessagePergon(who, "Createfehler! O-Seite 2tes Item "+x+" "+y+" "+(tar1.z+CInt(itemdef[2])+z)+" "
                                            +Hex(itemdef[1])+" ErrorText: "+item.errortext);
                EndIf
              EndIf
            ElseIf (y==Tary2) //S Seite
              itemdef:=GetConfigString(cfgrandom[element],"s");
              If (!itemdef)
                SendSysMessagePergon(who, "S-Seite fehlt.");
              Else
                itemdef:=SplitWords(itemdef);
                itemdef:=ChooseRandom(itemdef);
                itemdef:=SplitWords(itemdef,",");
                item:=CreateItemAtLocationPergon(x,y,tar1.z+CInt(itemdef[2])+z,CInt(itemdef[1]),1,who.realm);
                If (item)
                  item.color:=color;
                  item.movable:=0;
                  items.append(item);
                Else
                  SendSysMessagePergon(who, "Createfehler! S-Seite Item "+x+" "+y+" "+(tar1.z+CInt(itemdef[2])+z)+" "
                                            +Hex(itemdef[1])+" ErrorText: "+item.errortext);
                EndIf
              EndIf
              //Zweites Item erzeugen
              itemdef:=GetConfigString(cfgrandom[element],"s1");
              If ((itemdef) && (itemdef<>{}))
                itemdef:=SplitWords(itemdef);
                itemdef:=ChooseRandom(itemdef);
                itemdef:=SplitWords(itemdef,",");
                item:=CreateItemAtLocationPergon(x,y,tar1.z+CInt(itemdef[2])+z,CInt(itemdef[1]),1,who.realm);
                If (item)
                  item.color:=color;
                  item.movable:=0;
                  items.append(item);
                Else
                  SendSysMessagePergon(who, "Createfehler! S-Seite 2tes Item "+x+" "+y+" "+(tar1.z+CInt(itemdef[2])+z)+" "
                                            +Hex(itemdef[1])+" ErrorText: "+item.errortext);
                EndIf
              EndIf
            ElseIf (x==Tarx) //W Seite
              itemdef:=GetConfigString(cfgrandom[element],"w");
              If (!itemdef)
                SendSysMessagePergon(who, "W-Seite fehlt.");
              Else
                itemdef:=SplitWords(itemdef);
                itemdef:=ChooseRandom(itemdef);
                itemdef:=SplitWords(itemdef,",");
                item:=CreateItemAtLocationPergon(x,y,tar1.z+CInt(itemdef[2])+z,CInt(itemdef[1]),1,who.realm);
                If (item)
                  item.color:=color;
                  item.movable:=0;
                  items.append(item);
                Else
                  SendSysMessagePergon(who, "Createfehler! W-Seite Item "+x+" "+y+" "+(tar1.z+CInt(itemdef[2])+z)+" "
                                            +Hex(itemdef[1])+" ErrorText: "+item.errortext);
                EndIf
              EndIf
              //Zweites Item erzeugen
              itemdef:=GetConfigString(cfgrandom[element],"w1");
              If ((itemdef) && (itemdef<>{}))
                itemdef:=SplitWords(itemdef);
                itemdef:=ChooseRandom(itemdef);
                itemdef:=SplitWords(itemdef,",");
                item:=CreateItemAtLocationPergon(x,y,tar1.z+CInt(itemdef[2])+z,CInt(itemdef[1]),1,who.realm);
                If (item)
                  item.color:=color;
                  item.movable:=0;
                  items.append(item);
                Else
                  SendSysMessagePergon(who, "Createfehler! W-Seite 2tes Item "+x+" "+y+" "+(tar1.z+CInt(itemdef[2])+z)+" "
                                            +Hex(itemdef[1])+" ErrorText: "+item.errortext);
                EndIf
              EndIf
            Else //Mittelstück
              itemdef:=ChooseRandom(tiles);
              If (!itemdef)
                SendSysMessagePergon(who, "Mittelstück fehlt.");
              Else
                itemdef:=SplitWords(itemdef,",");
                item:=CreateItemAtLocationPergon(x,y,tar1.z+CInt(itemdef[2])+z,CInt(itemdef[1]),1,who.realm);
                If (item)
                  item.color:=color;
                  item.movable:=0;
                  items.append(item);
                Else
                  SendSysMessagePergon(who, "Createfehler! Mittelteil Item "+x+" "+y+" "+(tar1.z+CInt(itemdef[2])+z)+" "
                                            +Hex(itemdef[1])+" ErrorText: "+item.errortext);
                EndIf
              EndIf
              //Zweites Item erzeugen
              itemdef:=tiles1.randomentry();
              If ((itemdef) && (itemdef<>{}))
                itemdef:=SplitWords(itemdef,",");
                item:=CreateItemAtLocationPergon(x,y,tar1.z+CInt(itemdef[2])+z,CInt(itemdef[1]),1,who.realm);
                If (item)
                  item.color:=color;
                  item.movable:=0;
                  items.append(item);
                Else
                  SendSysMessagePergon(who, "Createfehler! Mittelteil 2tes Item "+x+" "+y+" "+(tar1.z+CInt(itemdef[2])+z)+" "
                                            +Hex(itemdef[1])+" ErrorText: "+item.errortext);
                EndIf
              EndIf
            EndIf
            SleepMS(5);
          EndFor
        EndFor
      Else // Langweilige Version ohne Rand
        For (x:=Tarx;x<=Tarx2;x+=1)
          For (y:=Tary;y<=Tary2;y+=1)
            itemdef:=ChooseRandom(tiles);
            If (!itemdef)
              SendSysMessagePergon(who, "Mittelstück fehlt.");
            Else
              itemdef:=SplitWords(itemdef,",");
              item:=CreateItemAtLocationPergon(x,y,tar1.z+CInt(itemdef[2])+z,CInt(itemdef[1]),1,who.realm);
              If (item)
                item.color:=color;
                item.movable:=0;
                items.append(item);
              Else
                SendSysMessagePergon(who, "Createfehler! Item "+x+" "+y+" "+(tar1.z+CInt(itemdef[2])+z)+" "
                                          +Hex(itemdef[1])+" ErrorText: "+item.errortext);
              EndIf
            EndIf
            //Zweites Item erzeugen
            itemdef:=tiles1.randomentry();
            If ((itemdef) && (itemdef<>{}))
              itemdef:=SplitWords(itemdef,",");
              item:=CreateItemAtLocationPergon(x,y,tar1.z+CInt(itemdef[2])+z,CInt(itemdef[1]),1,who.realm);
              If (item)
                item.color:=color;
                item.movable:=0;
                items.append(item);
              Else
                SendSysMessagePergon(who, "Createfehler! 2tes Item "+x+" "+y+" "+(tar1.z+CInt(itemdef[2])+z)+" "
                                          +Hex(itemdef[1])+" ErrorText: "+item.errortext);
              EndIf
            EndIf
            SleepMS(5);
          EndFor
        EndFor
      EndIf
      // Itemserials speichern
      ForEach item in items
        item.setprop(CPROP_INIT,items[1].serial);
        SleepMS(2);
      EndForEach
      ForEach item in items
        itemserials.append(item.serial);
        SleepMS(2);
      EndForEach
      items[1].setprop(CPROP_ITEMS,itemserials);

      If (ret[ITEMMODIFY]) // Position ändern
        If (!ModifyItems(who,items))
          Return;
        EndIf
      EndIf
    Else
      SendSysMessagePergon(who, "Abbruch", "Abort");
    EndIf
  Else
    SendSysMessagePergon(who, "Abbruch", "Abort");
  EndIf
EndFunction // }}}

///////////////////////////////////
// CreateEinzel - ...
///////////////////////////////////

Function CreateEinzel(who, byref ret, byref tiles, byref color) // {{{
  Var z, itemdef:={}, iTarget, item, items:={}, itemserials:={};

  If (!tiles[ret.keys[2]])
    SendSysMessagePergon(who, "Kein Item ausgewählt");
    Return;
  EndIf
  SendSysMessagePergon(who, "Position anvisieren");
  z:=ret[ITEMPOS];
  z[1,6]:="";
  z:=CInt(z);
  itemdef[1]:=CInt(SplitWords(tiles[ret.keys[2]],",")[1]); // Objtype
  itemdef[2]:=CInt(SplitWords(tiles[ret.keys[2]],",")[2]); // Feste z-Koords
  iTarget:=TargetCoordinates(who);
  If (iTarget.item)
    If (iTarget.item.container)
      SendSysMessagePergon(who,"Abbruch. Item in Container anvisiert!");
      Return;
    EndIf
  EndIf
  While (iTarget)  // Endlos bis ESC
    item:=CreateItemAtLocationPergon(iTarget.x,iTarget.y,iTarget.z+itemdef[2]+z,itemdef[1],1,who.realm);
    If (item)
      item.color:=color;
      item.movable:=0;
      // Itemserials speichern
      If (!ret[ITEMMMULTICREATE])
        item.setprop(CPROP_INIT,item.serial);
        item.setprop(CPROP_ITEMS,{item.serial});
        If (ret[ITEMMODIFY])  // Postion ändern
          If (!ModifyItems(who,item))
            SendSysMessagePergon(who, "Abbruch", "Abort");
            Return;
          EndIf
        EndIf
      Else
        items.append(item);
      EndIf
    Else
      SendSysMessagePergon(who, "Createfehler! Item "+iTarget.x+" "+iTarget.y+" "+(iTarget.z+itemdef[2]+z)+" "
                                +Hex(tiles[ret.keys[2]])+" ErrorText: "+item.errortext);
    EndIf
    iTarget:=TargetCoordinates(who);
  EndWhile
  If (ret[ITEMMMULTICREATE])
    // Itemserials speichern
    ForEach item in items
      item.setprop(CPROP_INIT,items[1].serial);
    EndForEach
    ForEach item in items
      itemserials.append(item.serial);
    EndForEach
    items[1].setprop(CPROP_ITEMS,itemserials);
    If (ret[ITEMMODIFY])  // Postion ändern
      ModifyItems(who,items);
    EndIf
  EndIf
  SendSysMessagePergon(who, "Abbruch", "Abort");
EndFunction // }}}

///////////////////////////////////
// CreateSet - ...
///////////////////////////////////

Function CreateSet(who,byref ret,byref set,byref color) // {{{
  Var iTarget, items, itemserials:={}, wholeitems:={};
  Var z:=ret[ITEMPOS];
  z[1,6]:="";
  z:=CInt(z);

  iTarget:=TargetCoordinates(who);
  If (iTarget.item)
    If (iTarget.item.container)
      SendSysMessagePergon(who,"Abbruch. Item in Container anvisiert!");
      Return;
    EndIf
  EndIf
  While (iTarget)  // Endlos bis ESC
    iTarget.z:=iTarget.z+z;
    items:=MakeSet(iTarget, set, 1)[2];
    If (items)
      If (color)
        ForEach item in items
          item.color:=color;
          SleepMS(2);
        EndForEach
      EndIf
      If (!ret[ITEMMMULTICREATE])
        // Itemserials speichern
        itemserials:={};
        ForEach item in items
          item.setprop(CPROP_INIT,items[1].serial);
          SleepMS(2);
        EndForEach
        ForEach item in items
          itemserials.append(item.serial);
          SleepMS(2);
        EndForEach
        items[1].setprop(CPROP_ITEMS,itemserials);

        If (ret[ITEMMODIFY])  // Postion ändern
          If (!ModifyItems(who,items))
            Return;
          EndIf
        EndIf
      Else
        ForEach item in items
          wholeitems.append(item);
          SleepMS(2);
        EndForEach
      EndIf
    Else
      SendSysMessagePergon(who,"Irgendetwas ging schief.");
      Return;
    EndIf
    iTarget:=TargetCoordinates(who);
  EndWhile
  If (ret[ITEMMMULTICREATE])
    // Itemserials speichern
    ForEach item in wholeitems
      item.setprop(CPROP_INIT,wholeitems[1].serial);
      SleepMS(2);
    EndForEach
    ForEach item in wholeitems
      itemserials.append(item.serial);
      SleepMS(2);
    EndForEach
    wholeitems[1].setprop(CPROP_ITEMS,itemserials);
    If (ret[ITEMMODIFY])  // Postion ändern
      ModifyItems(who,items);
    EndIf
  EndIf
  SendSysMessagePergon(who, "Abbruch", "Abort");
EndFunction // }}}

///////////////////////////////////
// ModifyItemsManual - ...
///////////////////////////////////

Function ModifyItemsManual(who) // {{{
  Var retmodify, tar, inititem, items:={}, itemserials:={}, color, zstart, zend, temp, i, obj, tempitems:={};
  Var tar1, tar2, x1, x2, y1, y2, breakflag;
  Var dupe:={}, dupeitem, dupeserials:={};

  While (who.connected)
    If (items<>{})
      datamodify_M[COLORDATAPOS]:=items[1].color;
      datamodify_M[XKOORDSPOS]:="<basefont color="+HTML_LIGHTGRAY+"><p align=right>"+items[1].x+"</p></basefont>";
      datamodify_M[YKOORDSPOS]:="<basefont color="+HTML_LIGHTGRAY+"><p align=right>"+items[1].y+"</p></basefont>";
      datamodify_M[ZKOORDSPOS]:="<basefont color="+HTML_LIGHTGRAY+"><p align=right>"+items[1].z+"</p></basefont>";
      datamodify_M[XENTRY]:=items[1].x;
      datamodify_M[YENTRY]:=items[1].y;
      datamodify_M[ZENTRY]:=items[1].z;
    Else
      datamodify_M[COLORDATAPOS]:="0";
      datamodify_M[XKOORDSPOS]:="<basefont color="+HTML_LIGHTGRAY+"><p align=right>x</p></basefont>";
      datamodify_M[YKOORDSPOS]:="<basefont color="+HTML_LIGHTGRAY+"><p align=right>y</p></basefont>";
      datamodify_M[ZKOORDSPOS]:="<basefont color="+HTML_LIGHTGRAY+"><p align=right>z</p></basefont>";
      datamodify_M[XENTRY]:=0;
      datamodify_M[YENTRY]:=0;
      datamodify_M[ZENTRY]:=0;
    EndIf
    retmodify:=SendDialogGump(who,layoutmodify_M,datamodify_M,10,50);
    If (retmodify[MODIFY_START])
      If (!retmodify[MODIFY_CUSTOM]) // Suche nach .bautool Items
        tar:=Target(who,TGTOPT_NOCHECK_LOS);
        If (tar)
          If ((!tar.getprop(CPROP_ITEMS)) && (tar.getprop(CPROP_INIT)))
            inititem:=SystemFindObjectBySerial(tar.getprop(CPROP_INIT));
            If (inititem)
              itemserials:=inititem.getprop(CPROP_ITEMS);
              items:={};
              tempitems:={};
              ForEach item in itemserials
                obj:=SystemFindObjectBySerial(item);
                If (obj)
                  If (CInt(obj.getprop(CPROP_INIT))==CInt(inititem.serial)) // gehört es noch der selben Gruppe an
                    items.append(obj);
                    tempitems.append(obj.serial);
                  EndIf
                EndIf
                SleepMS(5);
              EndForEach
              inititem.setprop(CPROP_ITEMS,tempitems); // gefilterte Serials speichern
              If ((!items) || (items=={}))
                SendSysMessagePergon(who,"Items konnten nicht gefunden werden. Abbruch");
              Else
                SendSysMessagePergon(who,items.size()+" Items erkannt.");
              EndIf
            Else
              SendSysMessagePergon(who,"Init-Item nicht gefunden. Bestimme neues Init-Item ...");
              items := RecoverInitItem(tar);
            EndIf
          ElseIf (tar.getprop(CPROP_ITEMS))
            itemserials:=tar.getprop(CPROP_ITEMS);
            items:={};
            tempitems:={};
            ForEach item in itemserials
              obj:=SystemFindObjectBySerial(item);
              If (obj)
                If (CInt(obj.getprop(CPROP_INIT))==CInt(tar.serial)) // gehört es noch der selben Gruppe an
                  items.append(obj);
                  tempitems.append(obj.serial);
                EndIf
              EndIf
              SleepMS(5);
            EndForEach
            tar.setprop(CPROP_ITEMS,tempitems); // gefilterte Serials speichern
            SendSysMessagePergon(who,items.size()+" Items erkannt.");
          Else
            SendSysMessagePergon(who,"Ungültiges Item gewählt.");
          EndIf
        Else
          SendSysMessagePergon(who,"Abbruch","Abort");
          items:={};
        EndIf
      Else // Suche nach beliebigen Items
        zstart:=retmodify[MODIFY_Z_START];
        zstart[1,6]:="";
        zstart:=CInt(zstart);
        zend:=retmodify[MODIFY_Z_END];
        zend[1,6]:="";
        zend:=CInt(zend);
        datamodify_M[ZSTARTPOS]:=zstart;
        datamodify_M[ZENDPOS]:=zend;
        SendSysMessagePergon(who,"Erste Ecke des Bereiches anvisieren");
        tar1:=TargetCoordinates(who);
        If (tar1)
          SendSysMessagePergon(who,"Zweite Ecke des Bereiches anvisieren");
          tar2:=TargetCoordinates(who);
          If (tar2)
            If (tar1.x>tar2.x)  // Sortierung des Bereiches
              x1:=tar2.x;
              x2:=tar1.x;
            Else
              x1:=tar1.x;
              x2:=tar2.x;
            EndIf
            If (tar1.y>tar2.y)
              y1:=tar2.y;
              y2:=tar1.y;
            Else
              y1:=tar1.y;
              y2:=tar2.y;
            EndIf
            items:={};
            ForEach item in ListObjectsInBox(x1,y1,zstart,x2,y2,zend,tar2.realm)
              If (item.isA(POLCLASS_ITEM))
                If (!item.invisible)  // Unsichtbarer Kram wie Spawnrunen nicht mitnehmen
                  items.append(item);
                EndIf
              EndIf
              SleepMS(5);
            EndForEach
            If (items<>{})
              SendSysMessagePergon(who,items.size()+" Items erkannt.");
              If (retmodify[MODIFY_MARK])
                // Itemserials speichern
                itemserials:={};
                ForEach item in items
                  itemserials.append(item.serial);
                  SleepMS(2);
                EndForEach
                SendSysMessagePergon(who,"Wähle das Ursprungsitem.");
                breakflag:=0;
                While (who.connected)
                  tar:=Target(who,TGTOPT_NOCHECK_LOS);
                  If (tar)
                  	i := tar.serial in itemserials;
                    If (i) //Gewähltes Item an erste Stelle schieben
                      temp:=itemserials[1];
                      itemserials[i]:=temp;
                      itemserials[1]:=tar.serial;
                      ForEach item in items
                        item.setprop(CPROP_INIT,tar.serial);
                        item.eraseprop(CPROP_ITEMS);
                        SleepMS(2);
                      EndForEach
                      tar.setprop(CPROP_ITEMS,itemserials);
                      Break;
                    Else
                      SendSysMessagePergon(who,"Item befindet sich nicht unter den Erkannten!");
                    EndIf
                  Else
                    SendSysMessagePergon(who,"Abbruch", "Abort");
                    breakflag:=1;
                    Break;
                  EndIf
                EndWhile
                items:={};
                If (!breakflag)
                  ForEach item in itemserials  // Neusortierung und letzter Check
                    obj:=SystemFindObjectBySerial(item);
                    If (obj)
                      items.append(obj);
                    EndIf
                    SleepMS(5);
                  EndForEach
                  SendSysMessagePergon(who,".. und gebrandmarkt.");
                EndIf
              EndIf
            Else
              SendSysMessagePergon(who,"Keine Items erkannt.");
            EndIf
          Else
            SendSysMessagePergon(who,"Abbruch","Abort");
            items:={};
          EndIf
        Else
          SendSysMessagePergon(who,"Abbruch","Abort");
          items:={};
        EndIf
      EndIf
    Else
      If (retmodify.keys[retmodify.keys.size()]>MODIFY_START)
        If (items<>{})
          If (retmodify[MODIFY_Y_UP])
            ForEach item in items
              MoveObjectToLocation(item,item.x,item.y+1,item.z,item.realm,ITEMMOVEFLAGS);
              SleepMS(2);
            EndForEach
          ElseIf (retmodify[MODIFY_Y_DOWN])
            ForEach item in items
              MoveObjectToLocation(item,item.x,item.y-1,item.z,item.realm,ITEMMOVEFLAGS);
              SleepMS(2);
            EndForEach
          ElseIf (retmodify[MODIFY_X_UP])
            ForEach item in items
              MoveObjectToLocation(item,item.x+1,item.y,item.z,item.realm,ITEMMOVEFLAGS);
              SleepMS(2);
            EndForEach
          ElseIf (retmodify[MODIFY_X_DOWN])
            ForEach item in items
              MoveObjectToLocation(item,item.x-1,item.y,item.z,item.realm,ITEMMOVEFLAGS);
              SleepMS(2);
            EndForEach
          ElseIf (retmodify[MODIFY_XY_MM])
            ForEach item in items
              MoveObjectToLocation(item,item.x-1,item.y-1,item.z,item.realm,ITEMMOVEFLAGS);
              SleepMS(2);
            EndForEach
          ElseIf (retmodify[MODIFY_XY_PM])
            ForEach item in items
              MoveObjectToLocation(item,item.x+1,item.y-1,item.z,item.realm,ITEMMOVEFLAGS);
              SleepMS(2);
            EndForEach
          ElseIf (retmodify[MODIFY_XY_MP])
            ForEach item in items
              MoveObjectToLocation(item,item.x-1,item.y+1,item.z,item.realm,ITEMMOVEFLAGS);
              SleepMS(2);
            EndForEach
          ElseIf (retmodify[MODIFY_XY_PP])
            ForEach item in items
              MoveObjectToLocation(item,item.x+1,item.y+1,item.z,item.realm,ITEMMOVEFLAGS);
              SleepMS(2);
            EndForEach
          ElseIf (retmodify[MODIFY_Z_UP])
            ForEach item in items
              MoveObjectToLocation(item,item.x,item.y,item.z+1,item.realm,ITEMMOVEFLAGS);
              SleepMS(2);
            EndForEach
          ElseIf (retmodify[MODIFY_Z_DOWN])
            ForEach item in items
              MoveObjectToLocation(item,item.x,item.y,item.z-1,item.realm,ITEMMOVEFLAGS);
              SleepMS(2);
            EndForEach
          ElseIf (retmodify[MODIFY_DESTROY])
            ForEach item in items
              DestroyItem(item);
              SleepMS(2);
            EndForEach
            items:={};
          ElseIf (retmodify[MODIFY_COLOR])
            color:=retmodify[ITEMCOLOR];
            color[1,6]:="";
            color:=CInt(color);
            ForEach item in items
              item.color:=color;
              SleepMS(2);
            EndForEach
          ElseIf (retmodify[MODIFY_DUPE])
            dupe:={};
            dupeserials:={};
            ForEach item in items
              dupeitem:=CreateItemCopyAtLocation(item.x,item.y,item.z,item,item.realm);
              If (dupeitem)
                dupe.append(dupeitem);
                dupeserials.append(dupeitem.serial);
              EndIf
              SleepMS(2);
            EndForEach
            ForEach item in dupe
              item.setprop(CPROP_INIT,dupeserials[1]);
              SleepMS(2);
            EndForEach
            dupe[1].setprop(CPROP_ITEMS,dupeserials);
            SendSysMessagePergon(who,dupe.size()+" Items erfolgreich dupliziert.");
            items:=dupe; // Mit Kopie weiterarbeiten
          ElseIf (retmodify[MODIFY_X])
            temp:=retmodify[MODIFY_X_ENTRY];
            temp[1,6]:="";
            temp:=CInt(temp)-items[1].x;
            ForEach item in items
              MoveObjectToLocation(item,item.x+temp,item.y,item.z,item.realm,ITEMMOVEFLAGS);
              SleepMS(2);
            EndForEach
          ElseIf (retmodify[MODIFY_Y])
            temp:=retmodify[MODIFY_Y_ENTRY];
            temp[1,6]:="";
            temp:=CInt(temp)-items[1].y;
            ForEach item in items
              MoveObjectToLocation(item,item.x,item.y+temp,item.z,item.realm,ITEMMOVEFLAGS);
              SleepMS(2);
            EndForEach
          ElseIf (retmodify[MODIFY_Z])
            temp:=retmodify[MODIFY_Z_ENTRY];
            temp[1,6]:="";
            temp:=CInt(temp)-items[1].z;
            ForEach item in items
              MoveObjectToLocation(item,item.x,item.y,item.z+temp,item.realm,ITEMMOVEFLAGS);
              SleepMS(2);
            EndForEach
          EndIf
        Else
          SendSysMessagePergon(who,"Keine Items ausgewählt.");
        EndIf
      ElseIf (retmodify[MODIFY_MARKEDIT])
        MarkEdit(who);
      Else  // Gump geschlossen
        SendSysMessagePergon(who,"Abbruch","Abort");
        Break;
      EndIf
    EndIf
  EndWhile
EndFunction // }}}

///////////////////////////////////
// MarkEdit - Möglichkeit die Gruppen zu ändern
///////////////////////////////////

Function MarkEdit(who) // {{{
  Var ret,tar1, tar2,x1,x2,y1,y2,items:={}, itemref, inititem, itemserials, tempitems, obj,i;

  While (who.connected)
    ret:=SendDialogGump(who,layoutmark,datamark,10,50);

    If (ret[MARK_SHOW])
      SendSysMessagePergon(who,"Erste Ecke des Bereiches anvisieren");
      tar1:=TargetCoordinates(who);
      If (tar1)
        SendSysMessagePergon(who,"Zweite Ecke des Bereiches anvisieren");
        tar2:=TargetCoordinates(who);
        If (tar2)
          If (tar1.x>tar2.x)  // Sortierung des Bereiches
            x1:=tar2.x;
            x2:=tar1.x;
          Else
            x1:=tar1.x;
            x2:=tar2.x;
          EndIf
          If (tar1.y>tar2.y)
            y1:=tar2.y;
            y2:=tar1.y;
          Else
            y1:=tar1.y;
            y2:=tar2.y;
          EndIf
          items:={};
          ForEach item in ListObjectsInBox(x1,y1,-127,x2,y2,128,tar2.realm)  // Items besorgen
            If (item.isA(POLCLASS_ITEM))
              If (item.getprop(CPROP_ITEMS))
                items.append(item);
              EndIf
            EndIf
            SleepMS(5);
          EndForEach
          If (items<>{})
            ForEach item in items  // Färben nach Gruppen
              ForEach slaveitem in (item.getprop(CPROP_ITEMS))
                itemref:=SystemFindObjectBySerial(slaveitem);
                If (itemref)
                  If (itemref.getprop(CPROP_COLOR).errortext)
                    itemref.setprop(CPROP_COLOR,itemref.color);
                  EndIf
                  itemref.color:=_item_iter+6;
                EndIf
                SleepMS(5);
              EndForEach
            EndForEach
          EndIf
        EndIf
      EndIf

    ElseIf (ret[MARK_HIDE])
      SendSysMessagePergon(who,"Erste Ecke des Bereiches anvisieren");
      tar1:=TargetCoordinates(who);
      If (tar1)
        SendSysMessagePergon(who,"Zweite Ecke des Bereiches anvisieren");
        tar2:=TargetCoordinates(who);
        If (tar2)
          If (tar1.x>tar2.x)  // Sortierung des Bereiches
            x1:=tar2.x;
            x2:=tar1.x;
          Else
            x1:=tar1.x;
            x2:=tar2.x;
          EndIf
          If (tar1.y>tar2.y)
            y1:=tar2.y;
            y2:=tar1.y;
          Else
            y1:=tar1.y;
            y2:=tar2.y;
          EndIf
          items:={};
          ForEach item in ListObjectsInBox(x1,y1,-127,x2,y2,128,tar2.realm)  // Items besorgen
            If (item.isA(POLCLASS_ITEM))
              If (item.getprop(CPROP_ITEMS))
                items.append(item);
              EndIf
            EndIf
            SleepMS(5);
          EndForEach
          If (items<>{})
            ForEach item in items  // Färben nach Gruppen
              ForEach slaveitem in (item.getprop(CPROP_ITEMS))
                itemref:=SystemFindObjectBySerial(slaveitem);
                If (itemref)
                  If (itemref.getprop(CPROP_COLOR).errortext)
                    itemref.setprop(CPROP_COLOR,itemref.color);
                  EndIf
                  itemref.color:=_item_iter+6;
                EndIf
                SleepMS(5);
              EndForEach
            EndForEach
          EndIf

          ForEach item in ListObjectsInBox(x1,y1,-128,x2,y2,127,tar2.realm)  // Farbe zurücksetzen
            If (item.isA(POLCLASS_ITEM))
              If ((item.getprop(CPROP_ITEMS)) && (!item.getprop(CPROP_COLOR).errortext))
                ForEach slaveitem in (item.getprop(CPROP_ITEMS))
                  itemref:=SystemFindObjectBySerial(slaveitem);
                  If (itemref)
                    If (!itemref.getprop(CPROP_COLOR).errortext)
                      itemref.color:=CInt(item.getprop(CPROP_COLOR));
                      itemref.eraseprop(CPROP_COLOR);
                    EndIf
                  EndIf
                  SleepMS(5);
                EndForEach
              EndIf
            EndIf
            SleepMS(5);
          EndForEach
        EndIf
      EndIf

    ElseIf (ret[MARK_EDIT])
      SendSysMessagePergon(who,"Wählt die Itemgruppe.");
      tar1:=Target(who,TGTOPT_NOCHECK_LOS);
      items:={};
      tempitems:={};
      If ((!tar1.getprop(CPROP_ITEMS)) && (tar1.getprop(CPROP_INIT)))
        inititem:=SystemFindObjectBySerial(tar1.getprop(CPROP_INIT));
        If (inititem)
          itemserials:=inititem.getprop(CPROP_ITEMS);
          ForEach item in itemserials
            obj:=SystemFindObjectBySerial(item);
            If (obj)
              If ((CInt(obj.getprop(CPROP_INIT))==CInt(inititem.serial)) && (!(obj.serial in tempitems)))// gehört es noch der selben Gruppe an
                items.append(obj);
                tempitems.append(obj.serial);
                If (obj.getprop(CPROP_COLOR).errortext)
                  obj.setprop(CPROP_COLOR,obj.color);
                EndIf
                obj.color:=1281;
              EndIf
            EndIf
            SleepMS(5);
          EndForEach
          inititem.setprop(CPROP_ITEMS,tempitems); // gefilterte Serials speichern
          If ((!items) || (items=={}))
            SendSysMessagePergon(who,"Items konnten nicht gefunden werden. Abbruch");
          Else
            SendSysMessagePergon(who,items.size()+" Items erkannt.");
          EndIf
        Else
          SendSysMessagePergon(who,"Init-Item nicht gefunden. Bestimme neues Init-Item ...");
          items := RecoverInitItem(tar1);
        EndIf
      ElseIf (tar1.getprop(CPROP_ITEMS))
        itemserials:=tar1.getprop(CPROP_ITEMS);
        ForEach item in itemserials
          obj:=SystemFindObjectBySerial(item);
          If (obj)
            If (CInt(obj.getprop(CPROP_INIT))==CInt(tar1.serial)) // gehört es noch der selben Gruppe an
              items.append(obj);
              tempitems.append(obj.serial);
              If (obj.getprop(CPROP_COLOR).errortext)
                obj.setprop(CPROP_COLOR,obj.color);
              EndIf
              obj.color:=1281;
            EndIf
          EndIf
          SleepMS(5);
        EndForEach
        tar1.setprop(CPROP_ITEMS,tempitems); // gefilterte Serials speichern
        SendSysMessagePergon(who,items.size()+" Items erkannt.");
      Else
        SendSysMessagePergon(who,"Keine Items erkannt.");
      EndIf
      If (items<>{})
        While (who.connected)
          SendSysMessagePergon(who,"Wählt das Item das hinzugefügt/entfernt werden soll.");
          tar1:=Target(who,TGTOPT_NOCHECK_LOS);
          If ((!tar1) && (!tar1.isA(POLCLASS_ITEM)))
            SendSysMessagePergon(who,"Abbruch", "Abort");
            Break;
          EndIf
          i := tar1.serial in tempitems;
          If (i)  // Aus Gruppe entfernen
          	tempitems.erase(i);
            items.erase(i);
            tar1.eraseprop(CPROP_INIT);
          	tar1.eraseprop(CPROP_ITEMS);
            If (!tar1.getprop(CPROP_COLOR).errortext)
              tar1.color:=CInt(tar1.getprop(CPROP_COLOR));
              tar1.eraseprop(CPROP_COLOR);
            EndIf
          Else  // Hinzufügen
            If (tar1.getprop(CPROP_COLOR).errortext)
              tar1.setprop(CPROP_COLOR,tar1.color);
            EndIf
            tar1.color:=items[1].color;
            tempitems.append(tar1.serial);
            items.append(tar1);
          EndIf
        EndWhile

        ForEach item in items
          item.setprop(CPROP_INIT,items[1].serial);
          item.eraseprop(CPROP_ITEMS);
        EndForEach
        items[1].setprop(CPROP_ITEMS,tempitems);
        ForEach item in items
          If (!item.getprop(CPROP_COLOR).errortext)
            item.color:=CInt(item.getprop(CPROP_COLOR));
            item.eraseprop(CPROP_COLOR);
          EndIf
          SleepMS(1);
        EndForEach
      EndIf
    Else
      If (x1)  // Falls etwas gemacht wurde Farbe wieder zurücksetzen
        ForEach item in ListObjectsInBox(x1,y1,-128,x2,y2,127,tar2.realm)  // Farbe zurücksetzen
          If (item.isA(POLCLASS_ITEM))
            If ((item.getprop(CPROP_ITEMS)) && (!item.getprop(CPROP_COLOR).errortext))
              ForEach slaveitem in (item.getprop(CPROP_ITEMS))
                itemref:=SystemFindObjectBySerial(slaveitem);
                If (itemref)
                  If (!itemref.getprop(CPROP_COLOR).errortext)
                    itemref.color:=CInt(item.getprop(CPROP_COLOR));
                    itemref.eraseprop(CPROP_COLOR);
                  EndIf
                EndIf
                SleepMS(5);
              EndForEach
            EndIf
          EndIf
          SleepMS(5);
        EndForEach
      EndIf
      SendSysMessagePergon(who,"Abbruch", "Abort");
      Return;
    EndIf
  EndWhile
EndFunction // }}}


///////////////////////////////////
// ModifyItems - Position/Farbänderung nach dem Createn
///////////////////////////////////

Function ModifyItems(who,byref items) // {{{
  Var retmodify, color, temp, dupe:={}, dupeitem, dupeserials:={};

  If (TypeOfInt(items)!=OT_ARRAY)
    temp:=items;
    items:={};
    items.append(temp);
  EndIf
  While (who.connected)
    datamodify[COLORDATAPOS]:=items[1].color;
    datamodify[XKOORDSPOS]:="<basefont color="+HTML_LIGHTGRAY+"><p align=right>"+items[1].x+"</p></basefont>";
    datamodify[YKOORDSPOS]:="<basefont color="+HTML_LIGHTGRAY+"><p align=right>"+items[1].y+"</p></basefont>";
    datamodify[ZKOORDSPOS]:="<basefont color="+HTML_LIGHTGRAY+"><p align=right>"+items[1].z+"</p></basefont>";
    datamodify[XENTRY]:=items[1].x;
    datamodify[YENTRY]:=items[1].y;
    datamodify[ZENTRY]:=items[1].z;
    retmodify:=SendDialogGump(who,layoutmodify,datamodify,10,50);
    If (retmodify[MODIFY_Y_UP])
      ForEach item in items
        MoveObjectToLocation(item,item.x,item.y+1,item.z,item.realm,ITEMMOVEFLAGS);
        SleepMS(2);
      EndForEach
    ElseIf (retmodify[MODIFY_Y_DOWN])
      ForEach item in items
        MoveObjectToLocation(item,item.x,item.y-1,item.z,item.realm,ITEMMOVEFLAGS);
        SleepMS(2);
      EndForEach
    ElseIf (retmodify[MODIFY_X_UP])
      ForEach item in items
        MoveObjectToLocation(item,item.x+1,item.y,item.z,item.realm,ITEMMOVEFLAGS);
        SleepMS(2);
      EndForEach
    ElseIf (retmodify[MODIFY_X_DOWN])
      ForEach item in items
        MoveObjectToLocation(item,item.x-1,item.y,item.z,item.realm,ITEMMOVEFLAGS);
        SleepMS(2);
      EndForEach
    ElseIf (retmodify[MODIFY_XY_MM])
      ForEach item in items
        MoveObjectToLocation(item,item.x-1,item.y-1,item.z,item.realm,ITEMMOVEFLAGS);
        SleepMS(2);
      EndForEach
    ElseIf (retmodify[MODIFY_XY_PM])
      ForEach item in items
        MoveObjectToLocation(item,item.x+1,item.y-1,item.z,item.realm,ITEMMOVEFLAGS);
        SleepMS(2);
      EndForEach
    ElseIf (retmodify[MODIFY_XY_MP])
      ForEach item in items
        MoveObjectToLocation(item,item.x-1,item.y+1,item.z,item.realm,ITEMMOVEFLAGS);
        SleepMS(2);
      EndForEach
    ElseIf (retmodify[MODIFY_XY_PP])
      ForEach item in items
        MoveObjectToLocation(item,item.x+1,item.y+1,item.z,item.realm,ITEMMOVEFLAGS);
        SleepMS(2);
      EndForEach
    ElseIf (retmodify[MODIFY_Z_UP])
      ForEach item in items
        MoveObjectToLocation(item,item.x,item.y,item.z+1,item.realm,ITEMMOVEFLAGS);
        SleepMS(2);
      EndForEach
    ElseIf (retmodify[MODIFY_Z_DOWN])
      ForEach item in items
        MoveObjectToLocation(item,item.x,item.y,item.z-1,item.realm,ITEMMOVEFLAGS);
        SleepMS(2);
      EndForEach
    ElseIf (retmodify[MODIFY_DESTROY])
      ForEach item in items
        DestroyItem(item);
        SleepMS(2);
      EndForEach
      Break;
    ElseIf (retmodify[MODIFY_COLOR])
      color:=retmodify[ITEMCOLOR];
      color[1,6]:="";
      color:=CInt(color);
      ForEach item in items
        item.color:=color;
        SleepMS(2);
      EndForEach
    ElseIf (retmodify[MODIFY_DUPE])
      dupe:={};
      dupeserials:={};
      ForEach item in items
        dupeitem:=CreateItemCopyAtLocation(item.x,item.y,item.z,item,item.realm);
        If (dupeitem)
          dupe.append(dupeitem);
          dupeserials.append(dupeitem.serial);
        EndIf
        SleepMS(2);
      EndForEach
      ForEach item in dupe
        item.setprop(CPROP_INIT,dupeserials[1]);
        SleepMS(2);
      EndForEach
      dupe[1].setprop(CPROP_ITEMS,dupeserials);
      SendSysMessagePergon(who,dupe.size()+" Items erfolgreich dupliziert.");
      items:=dupe; // Kopie weiterbearbeiten
    ElseIf (retmodify[MODIFY_X])
      temp:=retmodify[MODIFY_X_ENTRY];
      temp[1,6]:="";
      temp:=CInt(temp)-items[1].x;
      ForEach item in items
        MoveObjectToLocation(item,item.x+temp,item.y,item.z,item.realm,ITEMMOVEFLAGS);
        SleepMS(2);
      EndForEach
    ElseIf (retmodify[MODIFY_Y])
      temp:=retmodify[MODIFY_Y_ENTRY];
      temp[1,6]:="";
      temp:=CInt(temp)-items[1].y;
      ForEach item in items
        MoveObjectToLocation(item,item.x,item.y+temp,item.z,item.realm,ITEMMOVEFLAGS);
        SleepMS(2);
      EndForEach
    ElseIf (retmodify[MODIFY_Z])
      temp:=retmodify[MODIFY_Z_ENTRY];
      temp[1,6]:="";
      temp:=CInt(temp)-items[1].z;
      ForEach item in items
        MoveObjectToLocation(item,item.x,item.y,item.z+temp,item.realm,ITEMMOVEFLAGS);
        SleepMS(2);
      EndForEach
    ElseIf (retmodify[BACKBUTTON])
      Break;
    Else
      Return(0); //Abbruch
    EndIf
  EndWhile
  Return(1);
EndFunction // }}}


///////////////////////////////////
// ChooseRandom - Zufallsbestimmung der Items
///////////////////////////////////

Function ChooseRandom(byref liste) // {{{
  Var verteilung:=0,i;
  Var rand:=RandomInt(100)+1;
  If (Find(liste[1],"%",1)) //Verteilung laut Cfg
    For (i:=1;i<=liste.size();i+=1)
      verteilung+=CInt(SplitWords(liste[i],"%")[2]);
      If (rand<=verteilung)
        Return(SplitWords(liste[i],"%")[1]);
      EndIf
    EndFor
  Else //Gleichverteilt
    verteilung:=CInt(100/liste.size());
    For(i:=1;i<=liste.size();i+=1)
      If (rand<=(i*verteilung))//innerhalb der wahrscheinlichkeit?
        Return(liste[i]);// Husch husch
      EndIf
    EndFor
  EndIf
  Return(liste.randomentry()); //naja dann halt so
EndFunction // }}}


///////////////////////////////////
// MenuBar - Erzeugt die NavBar
///////////////////////////////////

Function MenuBar(byref layout, byref data, byref datadict) // {{{
  Var i, page:=1,y:=66,nextpagebreak:=MAXBUTTON+1;
  If (TypeOfInt(datadict)==OT_DICTIONARY)  // Daten in Dictionary oder Array
    For (i:=1;i<=datadict.keys().size();i+=1)
      If (i==nextpagebreak)
        nextpagebreak+=MAXBUTTON;
        y:=66;
        page+=1;
        layout.append("button 565 287 5602 5606 0 "+page);
        layout.append("page "+page);
        layout.append("button 580 287 5600 5604 0 "+(page-1));
      EndIf
      layout.append("button 525 "+(y)+" 2440 2440 1 0 "+(MENUSTART+i));
      layout.append("resizepic 525 "+(y)+" 9250 166 25");
      layout.append("htmlgump 525 "+(4+y)+" 166 20 "+data.size()+" 0 0");
      If ((cfgrandom[datadict.keys()[i]]) && (cfgrandom[datadict.keys()[i]].name))
        data.append("<basefont color="+HTML_WHITE+"><center>"+cfgrandom[datadict.keys()[i]].name+"</center>");
      ElseIf ((cfgeinzel[datadict.keys()[i]]) && (cfgeinzel[datadict.keys()[i]].name))
        data.append("<basefont color="+HTML_LIGHTGRAY+"><center>"+cfgeinzel[datadict.keys()[i]].name+"</center>");
      ElseIf (cfgset[datadict.keys()[i]].name)
        data.append("<basefont color="+HTML_LIGHTGRAY+"><center>"+cfgset[datadict.keys()[i]].name+"</center>");
      Else
        data.append("<basefont color="+HTML_WHITE+"><center>"+datadict.keys()[i]+"</center>");
      EndIf
      y+=30;
    EndFor
  Else
    For (i:=1;i<=datadict.size();i+=1)
      If (i==nextpagebreak)
        nextpagebreak+=MAXBUTTON;
        y:=66;
        page+=1;
        layout.append("button 565 287 5602 5606 0 "+page+" 0");
        layout.append("page "+page);
        layout.append("button 580 287 5600 5604 0 "+(page-1)+" 0");
      EndIf
      layout.append("button 525 "+(y)+" 2440 2440 1 0 "+(MENUSTART+i));
      layout.append("resizepic 525 "+(y)+" 9250 166 25");
      layout.append("htmlgump 525 "+(4+y)+" 166 20 "+data.size()+" 0 0");
      If (TypeOfInt(datadict[i])==OT_ARRAY) //Typebezeichnung im Array
        If ((cfgrandom[datadict[i][1]].name) || (cfgeinzel[datadict[i][1]].name) || (cfgset[datadict[i][1]].name))
          Case (datadict[i][2])
            "Random":
              data.append("<basefont color="+HTML_WHITE+"><center>"+cfgrandom[datadict[i][1]].name+"</center>");
            "Einzel":
              data.append("<basefont color="+HTML_LIGHTGRAY+"><center>"+cfgeinzel[datadict[i][1]].name+"</center>");
            "Set":
              data.append("<basefont color="+HTML_LIGHTGRAY+"><center>"+cfgset[datadict[i][1]].name+"</center>");
          EndCase
        Else
          data.append("<basefont color="+HTML_WHITE+"><center>"+datadict[i][1]+"</center>");
        EndIf
      EndIf
      y+=30;
    EndFor
  EndIf
EndFunction // }}}


///////////////////////////////////
// Init - Erzeugt layout&data in einer Datafile (Serverrestart/Eremit)
///////////////////////////////////

Function Init() // {{{
  Var layoutraw:={"nodispose",
                  "page 0",
                  "resizepic 500 0 3600 215 390",  // Background
                  "resizepic 515 15 5054 185 30",  // Titel
                  "htmlgump 515 22 185 30 0 0 0",  // Titeltext
                  "resizepic 516 47 83 183 328",   // Einträge
                  "checkertrans 524 57 168 308",
                  "htmlgump 610 285 50 20 1 0 0",
                  "button 660 280 9726 9728 1 0 "+BACKBUTTON,
                  "gumppictiled 525 320 166 2 30002",
                  "button 530 330 9721 9724 1 0 "+ITEMMODIFYMANUAL,
                  "htmlgump 572 335 100 30 2 0 0",
                  "page 1"};
  Var dataraw:={"", //Titel
                "<basefont color="+HTML_LIGHTGRAY+">Zurück",
                "<basefont color="+HTML_LIGHTGRAY+">Item Modify"};

  SysLog(".BAUTOOL Datafile begin");
  SetGlobalProperty("bautoolinit",1);

  Var dataelement, layout:={}, data:={}, layoutp:={};
  Var element:=dictionary;
  Var cfgmenu:=ReadConfigFile("bautoolmenues");

  DFPurgeFile(datafile);

  //Layout bauen
  dataelement:=datafile.CreateElement("menu");

  // cfgmenu auslesen und die 3 cfgs einfügen
  ForEach key in (GetConfigStringArray(cfgmenu["Rootlist"],"sublist"))  //1. Ebene
    element[key]:=dictionary;

    If (cfgmenu[key].list) //Items
      ForEach itemlist in (GetConfigStringArray(cfgmenu[key],"list"))
        element[key][itemlist]:=array;
        ForEach itemkey in (GetConfigStringKeys(cfgrandom))  // Mögliche Random einfügen
          If (cfgrandom[itemkey].list==itemlist)
            element[key][itemlist].append({itemkey,"Random",cfgrandom[itemkey].name});
          EndIf
          SleepMS(2);
        EndForEach
        ForEach itemkey in (GetConfigStringKeys(cfgeinzel))  // Mögliche Einzel einfügen
          If (cfgeinzel[itemkey].list==itemlist)
            element[key][itemlist].append({itemkey,"Einzel",cfgeinzel[itemkey].name});
          EndIf
          SleepMS(2);
        EndForEach
        ForEach itemkey in (GetConfigStringKeys(cfgset))  // Mögliche Sets einfügen
          If (cfgset[itemkey].list==itemlist)
            element[key][itemlist].append({itemkey,"Set",cfgset[itemkey].name});
          EndIf
          SleepMS(2);
        EndForEach
        element[key][itemlist]:=SortArrayABC( element[key][itemlist], 1,3);
      EndForEach
    EndIf

    If (cfgmenu[key].sublist)
      ForEach sub1key in (GetConfigStringArray(cfgmenu[key],"sublist"))  //2. Ebene
        element[key][sub1key]:=dictionary;

        If (cfgmenu[sub1key].list) //Items
          ForEach itemlist in (GetConfigStringArray(cfgmenu[sub1key],"list"))
            element[key][sub1key][itemlist]:=array;
            ForEach itemkey in (GetConfigStringKeys(cfgrandom))  // Mögliche Random einfügen
              If (cfgrandom[itemkey].list==itemlist)
                element[key][sub1key][itemlist].append({itemkey,"Random",cfgrandom[itemkey].name});
              EndIf
              SleepMS(2);
            EndForEach
            ForEach itemkey in (GetConfigStringKeys(cfgeinzel))  // Mögliche Einzel einfügen
              If (cfgeinzel[itemkey].list==itemlist)
                element[key][sub1key][itemlist].append({itemkey,"Einzel",cfgeinzel[itemkey].name});
              EndIf
              SleepMS(2);
            EndForEach
            ForEach itemkey in (GetConfigStringKeys(cfgset))  // Mögliche Sets einfügen
              If (cfgset[itemkey].list==itemlist)
                element[key][sub1key][itemlist].append({itemkey,"Set",cfgset[itemkey].name});
              EndIf
              SleepMS(2);
            EndForEach
            element[key][sub1key][itemlist]:=SortArrayABC(element[key][sub1key][itemlist],1,3);
          EndForEach
        EndIf

        If (cfgmenu[sub1key].sublist)
          ForEach sub2key in (GetConfigStringArray(cfgmenu[sub1key],"sublist"))  //3. Ebene
            element[key][sub1key][sub2key]:=dictionary;

            If (cfgmenu[sub2key].list) //Items
              ForEach itemlist in (GetConfigStringArray(cfgmenu[sub2key],"list"))
                element[key][sub1key][sub2key][itemlist]:=array;
                ForEach itemkey in (GetConfigStringKeys(cfgrandom))  // Mögliche Random einfügen
                  If (cfgrandom[itemkey].list==itemlist)
                    element[key][sub1key][sub2key][itemlist].append({itemkey,"Random",cfgrandom[itemkey].name});
                  EndIf
                  SleepMS(2);
                EndForEach
                ForEach itemkey in (GetConfigStringKeys(cfgeinzel))  // Mögliche Einzel einfügen
                  If (cfgeinzel[itemkey].list==itemlist)
                    element[key][sub1key][sub2key][itemlist].append({itemkey,"Einzel",cfgeinzel[itemkey].name});
                  EndIf
                  SleepMS(2);
                EndForEach
                ForEach itemkey in (GetConfigStringKeys(cfgset))  // Mögliche Sets einfügen
                  If (cfgset[itemkey].list==itemlist)
                    element[key][sub1key][sub2key][itemlist].append({itemkey,"Set",cfgset[itemkey].name});
                  EndIf
                  SleepMS(2);
                EndForEach
                element[key][sub1key][sub2key][itemlist]:=SortArrayABC(element[key][sub1key][sub2key][itemlist],1,3);
              EndForEach
            EndIf

            If (cfgmenu[sub2key].sublist)
              ForEach sub3key in (GetConfigStringArray(cfgmenu[sub2key],"sublist"))  //4. Ebene
                element[key][sub1key][sub2key][sub3key]:=dictionary;

                If (cfgmenu[sub3key].list) //Items
                  ForEach itemlist in (GetConfigStringArray(cfgmenu[sub3key],"list"))
                    element[key][sub1key][sub2key][sub3key][itemlist]:=array;
                    ForEach itemkey in (GetConfigStringKeys(cfgrandom))  // Mögliche Random einfügen
                      If (cfgrandom[itemkey].list==itemlist)
                        element[key][sub1key][sub2key][sub3key][itemlist].append({itemkey,"Random",cfgrandom[itemkey].name});
                      EndIf
                      SleepMS(2);
                    EndForEach
                    ForEach itemkey in (GetConfigStringKeys(cfgeinzel))  // Mögliche Einzel einfügen
                      If (cfgeinzel[itemkey].list==itemlist)
                        element[key][sub1key][sub2key][sub3key][itemlist].append({itemkey,"Einzel",cfgeinzel[itemkey].name});
                      EndIf
                      SleepMS(2);
                    EndForEach
                    ForEach itemkey in (GetConfigStringKeys(cfgset))  // Mögliche Sets einfügen
                      If (cfgset[itemkey].list==itemlist)
                        element[key][sub1key][sub2key][sub3key][itemlist].append({itemkey,"Set",cfgset[itemkey].name});
                      EndIf
                      SleepMS(2);
                    EndForEach
                    element[key][sub1key][sub2key][sub3key][itemlist]:=
                           SortArrayABC(element[key][sub1key][sub2key][sub3key][itemlist],1,3);
                  EndForEach
                EndIf
              EndForEach
            EndIf
          EndForEach
        EndIf
      EndForEach
    EndIf
  EndForEach

  //Rootlist
  layout:=layoutraw;
  data:=dataraw;
  MenuBar(layout,data,element);
  data[1]:="<basefont size=8 color="+HTML_WHITE+"><center>BauTool "+VERSION+"</center>"; // Titel

  dataelement.setprop("LayoutMenuBar", layout);
  dataelement.setprop("DataMenuBar", data);

  ForEach ebene1 in element //1. Ebene
    layout:=layoutraw;
    data:=dataraw;
    MenuBar(layout,data,ebene1);
    data[1]:="<basefont size=8 color="+HTML_WHITE+"><center>"+_ebene1_iter+"</center>"; //Titel
    dataelement.setprop("LayoutMain_"+_ebene1_iter, layout);
    dataelement.setprop("DataMain_"+_ebene1_iter, data);

    ForEach ebene2 in ebene1 //2.Ebene
      layout:=layoutraw;
      data:=dataraw;
      MenuBar(layout,data,ebene2);
      data[1]:="<basefont size=8 color="+HTML_WHITE+"><center>"+_ebene2_iter+"</center>"; //Titel
      dataelement.setprop("LayoutSub_"+_ebene1_iter+"_"+_ebene2_iter, layout);
      dataelement.setprop("DataSub_"+_ebene1_iter+"_"+_ebene2_iter, data);

      If (TypeOfInt(ebene2)<>OT_DICTIONARY) // Items
        ForEach item in ebene2
          InitItems(data,layout,item,_ebene2_iter,layoutraw,dataraw);
          dataelement.setprop("LayoutItem_"+_ebene1_iter+"_"+_ebene2_iter+"_"+item[1], layout);
          dataelement.setprop("DataItem_"+_ebene1_iter+"_"+_ebene2_iter+"_"+item[1], data);
          SleepMS(2);
        EndForEach
      Else
        ForEach ebene3 in ebene2  // 3.Ebene
          layout:=layoutraw;
          data:=dataraw;
          MenuBar(layout,data,ebene3);
          data[1]:="<basefont size=8 color="+HTML_WHITE+"><center>"+_ebene3_iter+"</center>"; //Titel
          dataelement.setprop("LayoutSub_"+_ebene1_iter+"_"+_ebene2_iter+"_"+_ebene3_iter, layout);
          dataelement.setprop("DataSub_"+_ebene1_iter+"_"+_ebene2_iter+"_"+_ebene3_iter, data);

          If (TypeOfInt(ebene3)<>OT_DICTIONARY) // Items
            ForEach item in ebene3
              InitItems(data,layout,item,_ebene3_iter,layoutraw,dataraw);
              dataelement.setprop("LayoutItem_"+_ebene1_iter+"_"+_ebene2_iter+"_"+_ebene3_iter+"_"+item[1], layout);
              dataelement.setprop("DataItem_"+_ebene1_iter+"_"+_ebene2_iter+"_"+_ebene3_iter+"_"+item[1], data);
              SleepMS(2);
            EndForEach
          Else
            ForEach ebene4 in ebene3  // 4.Ebene
              layout:=layoutraw;
              data:=dataraw;
              MenuBar(layout,data,ebene4);
              data[1]:="<basefont size=8 color="+HTML_WHITE+"><center>"+_ebene4_iter+"</center>"; //Titel
              dataelement.setprop("LayoutSub_"+_ebene1_iter+"_"+_ebene2_iter+"_"+_ebene3_iter+"_"+_ebene4_iter, layout);
              dataelement.setprop("DataSub_"+_ebene1_iter+"_"+_ebene2_iter+"_"+_ebene3_iter+"_"+_ebene4_iter, data);

              If (TypeOfInt(ebene4)<>OT_DICTIONARY) // Items
                ForEach item in ebene4
                  InitItems(data,layout,item,_ebene4_iter,layoutraw,dataraw);
                  dataelement.setprop("LayoutItem_"+_ebene1_iter+"_"+_ebene2_iter+"_"+_ebene3_iter+"_"+_ebene4_iter+"_"+item[1], layout);
                  dataelement.setprop("DataItem_"+_ebene1_iter+"_"+_ebene2_iter+"_"+_ebene3_iter+"_"+_ebene4_iter+"_"+item[1], data);
                  SleepMS(2);
                EndForEach
              Else
                ForEach ebene5 in ebene4  // 5.Ebene
                  layout:=layoutraw;
                  data:=dataraw;
                  MenuBar(layout,data,ebene5);
                  data[1]:="<basefont size=8 color="+HTML_WHITE+"><center>"+_ebene5_iter+"</center>"; //Titel
                  dataelement.setprop("LayoutSub_"+_ebene1_iter+"_"+_ebene2_iter+"_"+_ebene3_iter+"_"+_ebene4_iter+"_"+_ebene5_iter, layout);
                  dataelement.setprop("DataSub_"+_ebene1_iter+"_"+_ebene2_iter+"_"+_ebene3_iter+"_"+_ebene4_iter+"_"+_ebene5_iter, data);

                  If (TypeOfInt(ebene5)<>OT_DICTIONARY) // Items
                    ForEach item in ebene5
                      InitItems(data,layout,item,_ebene5_iter,layoutraw,dataraw);
                      dataelement.setprop("LayoutItem_"+_ebene1_iter+"_"+_ebene2_iter+"_"+_ebene3_iter+"_"+_ebene4_iter+"_"+_ebene5_iter+"_"+item[1], layout);
                      dataelement.setprop("DataItem_"+_ebene1_iter+"_"+_ebene2_iter+"_"+_ebene3_iter+"_"+_ebene4_iter+"_"+_ebene5_iter+"_"+item[1], data);
                      SleepMS(2);
                    EndForEach
                  Else
                    ForEach ebene6 in ebene5  // 6.Ebene
                      InitItems(data,layout,ebene6,_ebene6_iter,layoutraw,dataraw);
                      dataelement.setprop("LayoutItem_"+_ebene1_iter+"_"+_ebene2_iter+"_"+_ebene3_iter+"_"+_ebene4_iter+"_"+_ebene5_iter+"_"+_ebene6_iter, layout);
                      dataelement.setprop("DataItem_"+_ebene1_iter+"_"+_ebene2_iter+"_"+_ebene3_iter+"_"+_ebene4_iter+"_"+_ebene5_iter+"_"+_ebene6_iter, data);
                      SleepMS(2);
                    EndForEach
                  EndIf
                EndForEach
              EndIf
            EndForEach
          EndIf
        EndForEach
      EndIf
    EndForEach
  EndForEach

  // ModifyItem Menu
  dataelement:=datafile.CreateElement("modify");
  layout:={"nodispose",
           "page 0",
           "resizepic 500 0 3600 215 280",  // Background
           "resizepic 515 15 5054 185 30",  // Titel
           "htmlgump 515 22 185 30 0 0 0",  // Titeltext
           "resizepic 515 47 83 185 218",   // Einträge
           "checkertrans 523 57 170 198",
           "htmlgump 610 225 50 20 1 0 0",  // Weiter
           "htmlgump 555 79 50 20 2 0 0",   // X/Y
           "htmlgump 624 79 50 20 3 0 0",   // Z
           "button 660 220 9721 9724 1 0 "+BACKBUTTON,
           "button 560 60 5600 5604 1 0 "+MODIFY_Y_DOWN,
           "button 560 100 5602 5606 1 0 "+MODIFY_Y_UP,
           "button 530 80 5603 5607 1 0 "+MODIFY_X_DOWN,
           "button 590 80 5601 5605 1 0 "+MODIFY_X_UP,
           "button 534 60 22406 22407 1 0 "+MODIFY_XY_MM,
           "button 583 60 22401 22400 1 0 "+MODIFY_XY_PM,
           "button 534 100 22403 22402 1 0 "+MODIFY_XY_MP,
           "button 583 100 22404 22405 1 0 "+MODIFY_XY_PP,
           "button 620 60 5600 5604 1 0 "+MODIFY_Z_UP,
           "button 620 100 5602 5606 1 0 "+MODIFY_Z_DOWN,
           "htmlgump 570 165 50 20 4 0 0",
           "button 530 160 9727 9728 1 0 "+MODIFY_DESTROY,
           "htmlgump 570 200 50 30 10 0 0",
           "button 530 195 9727 9728 1 0 "+MODIFY_DUPE,
           "htmlgump 570 130 50 30 5 0 0",
           "resizepic 610 125 2620 58 30",
           "textentry 616 130 40 20 1000 "+ITEMCOLOR+" 6",
           "button 530 125 9727 9728 1 0 "+MODIFY_COLOR,
           "htmlgump 630 60 50 20 7 0 0",  // x/y/z KoordsAngabe des ersten Items
           "tooltip 3000561", // Koords.:
           "htmlgump 630 80 50 20 8 0 0",
           "tooltip 3000561",
           "htmlgump 630 100 50 20 9 0 0",
           "tooltip 3000561",
           "button 681 64 2103 2104 0 2 0",
           "button 681 84 2103 2104 0 3 0",
           "button 681 104 2103 2104 0 4 0"};

  data:={"<basefont size=8 color="+HTML_WHITE+"><center>Modify Position</center>", //Titel
         "<basefont color="+HTML_LIGHTGRAY+">Weiter",
         "<basefont color="+HTML_LIGHTGRAY+">X/Y",
         "<basefont color="+HTML_LIGHTGRAY+">Z",
         "<basefont color="+HTML_LIGHTGRAY+">Destroy",
         "<basefont color="+HTML_LIGHTGRAY+">Color",
         "0",
         "<basefont color="+HTML_LIGHTGRAY+"><p align=right>x</p></basefont>",
         "<basefont color="+HTML_LIGHTGRAY+"><p align=right>y</p></basefont>",
         "<basefont color="+HTML_LIGHTGRAY+"><p align=right>z</p></basefont>",
         "<basefont color="+HTML_LIGHTGRAY+">Dupe",
         "0",
         "0",
         "0"};
  layoutp:={"page 2",
            "resizepic 720 40 3600 100 60",
            "resizepic 735 55 2620 48 30",
            "textentrylimited 741 60 30 20 1000 "+MODIFY_X_ENTRY+" 11 4",
            "button 790 63 2103 2104 1 0 "+MODIFY_X,
            "page 3",
            "resizepic 720 60 3600 100 60",
            "resizepic 735 75 2620 48 30",
            "textentrylimited 741 80 30 20 1000 "+MODIFY_Y_ENTRY+" 12 4",
            "button 790 83 2103 2104 1 0 "+MODIFY_Y,
            "page 4",
            "resizepic 720 80 3600 100 60",
            "resizepic 735 95 2620 48 30",
            "textentrylimited 741 100 30 20 1000 "+MODIFY_Z_ENTRY+" 13 4",
            "button 790 103 2103 2104 1 0 "+MODIFY_Z
           };

  dataelement.setprop("LayoutMenu", layout+layoutp);
  dataelement.setprop("DataMenu", data);


  // Manuelles Modify
  layout[3]:="resizepic 500 0 3600 215 440"; //Background erweitern
  layout[6]:="resizepic 516 47 83 183 377";
  layout[7]:="checkertrans 524 57 168 358";
  layout.erase(8);  //Weiterbuttontext
  layout.erase(10); //Weiterbutton
  layout.append("gumppictiled 525 235 165 2 30002");
  layout.append("htmlgump 595 255 100 20 1 0 0");
  layout.append("button 560 250 9721 9724 1 0 "+MODIFY_START);
  data[2]:="<basefont color="+HTML_LIGHTGRAY+">Items wählen";
  layout.append("resizepic 530 285 2620 48 30");
  layout.append("textentry 536 290 30 20 1000 "+MODIFY_Z_START+" 14");
  data.append("-20");
  layout.append("resizepic 635 285 2620 48 30");
  layout.append("textentry 641 290 30 20 1000 "+MODIFY_Z_END+" 15");
  data.append("20");
  layout.append("htmlgump 585 290 50 20 16 0 0");
  data.append("<basefont color="+HTML_LIGHTGRAY+">Z-Range");
  layout.append("checkbox 530 320 9720 9723 0 "+MODIFY_CUSTOM);
  layout.append("htmlgump 565 325 50 20 17 0 0");
  data.append("<basefont color="+HTML_LIGHTGRAY+">Custom");
  layout.append("checkbox 616 320 9720 9723 0 "+MODIFY_MARK);
  layout.append("htmlgump 651 325 50 20 18 0 0");
  data.append("<basefont color="+HTML_LIGHTGRAY+">Mark");
  layout.append("gumppictiled 525 360 165 2 30002");
  layout.append("button 530 375 9721 9724 1 0 "+MODIFY_MARKEDIT);
  layout.append("htmlgump 570 380 100 20 19 0 0");
  data.append("<basefont color="+HTML_LIGHTGRAY+">Mark Edit");
  dataelement.setprop("LayoutMenuManual", layout+layoutp);
  dataelement.setprop("DataMenuManual", data);

  //Mark Edit
  dataelement:=datafile.CreateElement("modifymark");
  layout:={"nodispose",
           "page 0",
           "resizepic 500 0 3600 215 213",  // Background
           "resizepic 515 15 5054 185 30",  // Titel
           "htmlgump 515 22 185 30 0 0 0",  // Titeltext
           "resizepic 515 47 83 185 150",   // Einträge-20
           "checkertrans 523 57 170 130",
           "button 530 70 9721 9724 1 0 "+MARK_SHOW,
           "htmlgump 570 75 50 20 1 0 0",
           "button 530 105 9721 9724 1 0 "+MARK_HIDE,
           "htmlgump 570 110 50 20 2 0 0",
           "button 530 140 9721 9724 1 0 "+MARK_EDIT,
           "htmlgump 570 145 50 20 3 0 0"
          };
  data:={"<basefont size=8 color="+HTML_WHITE+"><center>Mark Edit</center>",
         "<basefont color="+HTML_LIGHTGRAY+">Show",
         "<basefont color="+HTML_LIGHTGRAY+">Hide",
         "<basefont color="+HTML_LIGHTGRAY+">Edit"
        };
  dataelement.setprop("LayoutMenuMark", layout);
  dataelement.setprop("DataMenuMark", data);

  // Dict der Menüs/Items speichern
  dataelement:=datafile.CreateElement("elemente");
  dataelement.setprop("dictionary", element);

  EraseGlobalProperty("bautoolinit");
  SysLog(".BAUTOOL Datafile completed");

EndFunction // }}}

///////////////////////////////////
// InitItems - Auslagerung für die Initfunktion
///////////////////////////////////

Function InitItems(byref data,byref layout,byref element, name:=0, layoutraw, dataraw) // {{{
  var tile,nextpagebreak,nextlinebreak,x,y,page,m, itemdesc;
  Case (element[2])
    "Random":   // Random
      layout:=layoutraw;
      data:=dataraw;
      data[1]:="<basefont size=8 color="+HTML_WHITE+"><center>"+name+"</center>";
      layout:=layout+{"page 0","resizepic 70 0 3600 404 170",
                      "resizepic 85 15 5054 374 30","htmlgump 85 22 374 30 "+data.size()+" 0 0",
                      "resizepic 85 47 83 374 108","checkertrans 93 57 359 88"};
      data.append("<basefont size=5><center>"+cfgrandom[element[1]].name+"</center>");
      tile:=GetConfigStringArray(cfgrandom[element[1]],"tile")[1];
      layout.append("tilepic 95 60 "+CInt(SplitWords(tile,",")[1]));
      layout.append("htmlgump 160 70 50 30 "+data.size()+" 0 0");
      data.append("<basefont color="+HTML_LIGHTGRAY+">Color");
      layout.append("resizepic 200 65 2620 48 30");
      layout.append("textentry 206 70 30 20 1000 "+ITEMCOLOR+" "+data.size());
      data.append("0");
      If  ((GetConfigString(cfgrandom[element[1]],"n"))  // Option für Randteile nötig?
        || (GetConfigString(cfgrandom[element[1]],"s"))
        || (GetConfigString(cfgrandom[element[1]],"o"))
        || (GetConfigString(cfgrandom[element[1]],"w")))
        layout.append("htmlgump 360 60 50 40 "+data.size()+" 0 0");
        data.append("<basefont color="+HTML_LIGHTGRAY+">Randtiles erzeugen");
        layout.append("checkbox 420 65 9720 9723 0 "+ITEMRAND);
      EndIf
      layout.append("htmlgump 260 70 50 30 "+data.size()+" 0 0");
      data.append("<basefont color="+HTML_LIGHTGRAY+">z-Koord");
      layout.append("resizepic 310 65 2620 38 30");
      layout.append("textentry 316 70 20 20 1000 "+ITEMPOS+" "+data.size());
      data.append("0");
      layout.append("checkbox 420 110 9720 9723 1 "+ITEMMODIFY);
      layout.append("htmlgump 360 105 50 40 "+data.size()+" 0 0");
      data.append("<basefont color="+HTML_LIGHTGRAY+">Modify Position");
      layout.append("button 103 116 9721 9724 1 0 "+ITEMCREATE);
      layout.append("htmlgump 140 121 50 30 "+data.size()+" 0 0");
      data.append("<basefont color="+HTML_LIGHTGRAY+">Create");

    "Einzel":
      itemdesc:=ReadConfigFile(":*:itemdesc");  // Einlesen aller Itemdesc's für Namensbestimmung
      layout:=layoutraw;
      data:=dataraw;
      data[1]:="<basefont size=8 color="+HTML_WHITE+"><center>"+name+"</center>";
      layout:=layout+{"page 0","resizepic 70 0 3600 425 400",
                      "resizepic 85 15 5054 395 30","htmlgump 85 22 395 30 "+data.size()+" 0 0",
                      "resizepic 85 47 83 395 343"};
      data.append("<basefont size=5><center>"+cfgeinzel[element[1]].name+"</center>");
      layout.append("htmlgump 530 70 50 30 "+data.size()+" 0 0");
      data.append("<basefont color="+HTML_LIGHTGRAY+">Color");
      layout.append("resizepic 570 65 2620 48 30");
      layout.append("textentry 576 70 30 20 1000 "+ITEMCOLOR+" "+data.size());
      data.append("0");
      layout.append("htmlgump 530 110 50 30 "+data.size()+" 0 0");
      data.append("<basefont color="+HTML_LIGHTGRAY+">z-Koord");
      layout.append("resizepic 580 105 2620 38 30");
      layout.append("textentry 586 110 20 20 1000 "+ITEMPOS+" "+data.size());
      data.append("0");
      layout.append("checkbox 530 150 9720 9723 1 "+ITEMMODIFY);
      layout.append("htmlgump 572 155 100 30 "+data.size()+" 0 0");
      data.append("<basefont color="+HTML_LIGHTGRAY+">Modify Position");
      layout.append("checkbox 530 185 9720 9723 0 "+ITEMMMULTICREATE);
      layout.append("htmlgump 572 190 100 30 "+data.size()+" 0 0");
      data.append("<basefont color="+HTML_LIGHTGRAY+">Mark All");
      layout.append("button 570 225 9721 9724 1 0 "+ITEMCREATE);
      layout.append("htmlgump 612 230 50 30 "+data.size()+" 0 0");
      data.append("<basefont color="+HTML_LIGHTGRAY+">Create");

      tile:={};
      // Array der Items aufbauen
      ForEach tiles in (GetConfigStringArray(cfgeinzel[element[1]],"tile"))
        If (!tile)
          tile:={tiles};
        Else
          tile.append(tiles);
        EndIf
        SleepMS(2);
      EndForEach
      // Pages der Items erzeugen
      nextpagebreak:=MAXLINEITEM*2+1;
      nextlinebreak:=MAXLINEITEM+1;
      x:=100;y:=60;page:=1;
      layout.append("page 1");
      For (m:=1;m<=tile.size();m+=1)
        If (m==nextpagebreak)
          nextpagebreak+=MAXLINEITEM*2;
          nextlinebreak+=MAXLINEITEM;
          x:=100;
          y:=60;
          If (page>1)
            layout.append("button 250 360 5603 5607 0 "+(page-1)+" 0");
          EndIf
          page+=1;
          layout.append("button 280 360 5601 5605 0 "+page+" 0");
          layout.append("page "+page);
        EndIf
        If (m==nextlinebreak)
          y:=210;
          x:=100;
          nextlinebreak+=MAXLINEITEM;
        EndIf

        layout.append("radio "+(x)+" "+(y+35)+" 9720 9723 0 "+m);
        layout.append("tilepic "+(x+35)+" "+(y+35)+" "+CInt(SplitWords(tile[m],",")[1]));
        If (itemdesc[Hex(tile[m])].desc)  // Name einfügen .desc oder CliLoc-Eintrag
          layout.append("htmlgump "+(x+5)+" "+(y)+" 90 40 "+data.size()+" 0 0");
          data.append("<basefont color="+HTML_GRAY+">"+itemdesc[Hex(tile[m])].desc);
        Else
          layout.append("xmfhtmlgumpcolor "+(x+5)+" "+(y)+" 90 40 "+(1020000+CInt(tile[m]))+" 0 0 "+XMFCOLOR_GRAY2);
        EndIf
        x+=90;
        SleepMS(2);
      EndFor
      If (page>1)
        layout.append("button 250 360 5603 5607 0 "+(page-1)+" 0");
      EndIf

    "Set":
      layout:=layoutraw;
      data:=dataraw;
      data[1]:="<basefont size=8 color="+HTML_WHITE+"><center>"+name+"</center>";
      layout.append("htmlgump 515 60 185 30 "+data.size()+" 0 0");
      data.append("<basefont size=5 color="+HTML_LIGHTGRAY+"><center>"+cfgset[element[1]].name+"</center>");
      layout.append("htmlgump 530 100 50 30 "+data.size()+" 0 0");
      data.append("<basefont color="+HTML_LIGHTGRAY+">Color");
      layout.append("resizepic 570 95 2620 48 30");
      layout.append("textentry 576 100 30 20 1000 "+ITEMCOLOR+" "+data.size());
      data.append("0");
      layout.append("htmlgump 530 140 50 30 "+data.size()+" 0 0");
      data.append("<basefont color="+HTML_LIGHTGRAY+">z-Koord");
      layout.append("resizepic 580 135 2620 38 30");
      layout.append("textentry 586 140 20 20 1000 "+ITEMPOS+" "+data.size());
      data.append("0");
      layout.append("checkbox 530 180 9720 9723 1 "+ITEMMODIFY);
      layout.append("htmlgump 572 185 100 30 "+data.size()+" 0 0");
      data.append("<basefont color="+HTML_LIGHTGRAY+">Modify Position");
      layout.append("checkbox 530 215 9720 9723 0 "+ITEMMMULTICREATE);
      layout.append("htmlgump 572 220 100 30 "+data.size()+" 0 0");
      data.append("<basefont color="+HTML_LIGHTGRAY+">Mark All");

      layout.append("button 570 255 9721 9724 1 0 "+ITEMCREATE);
      layout.append("htmlgump 612 260 50 30 "+data.size()+" 0 0");
      data.append("<basefont color="+HTML_LIGHTGRAY+">Create");
  EndCase
EndFunction // }}}

// vim: sw=2 sts=2
